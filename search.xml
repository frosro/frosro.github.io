<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java JVM 知识检验</title>
    <url>/2020/07/19/java-JVM-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-说一下-JVM-的主要组成部分？及其作用？"><a href="#1-说一下-JVM-的主要组成部分？及其作用？" class="headerlink" title="1. 说一下 JVM 的主要组成部分？及其作用？"></a><strong>1.</strong> <strong>说一下</strong> <strong>JVM</strong> <strong>的主要组成部分？及其作用？</strong></h4><p>·    类加载器（ClassLoader）</p>
<p>·    运行时数据区（Runtime Data Area）</p>
<p>·    执行引擎（Execution Engine）</p>
<p>·    本地库接口（Native Interface）</p>
<p>组件的作用： 首先通过类加载器（ClassLoader）会把 Java 代码转换成字节码，运行时数据区（Runtime Data Area）再把字节码加载到内存中，而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令，再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p>
<h4 id="2-说一下-JVM-运行时数据区？"><a href="#2-说一下-JVM-运行时数据区？" class="headerlink" title="2. 说一下 JVM 运行时数据区？"></a><strong>2.</strong> <strong>说一下</strong> <strong>JVM</strong> <strong>运行时数据区？</strong></h4><p>不同虚拟机的运行时数据区可能略微有所不同，但都会遵从 Java 虚拟机规范， Java 虚拟机规范规定的区域分为以下 5 个部分：</p>
<p>·   程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，字节码解析器的工作是通过改变这个计数器的值，来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能，都需要依赖这个计数器来完成；</p>
<p>·   Java 虚拟机栈（Java Virtual Machine Stacks）：用于存储局部变量表、操作数栈、动态链接、方法出口等信息；</p>
<p>·   本地方法栈（Native Method Stack）：与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的；</p>
<p>·   Java 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；</p>
<p>·   方法区（Methed Area）：用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</p>
<h4 id="3-说一下堆栈的区别？"><a href="#3-说一下堆栈的区别？" class="headerlink" title="3. 说一下堆栈的区别？"></a><strong>3.</strong> <strong>说一下堆栈的区别？</strong></h4><p>·    功能方面：堆是用来存放对象的，栈是用来执行程序的。</p>
<p>·    共享性：堆是线程共享的，栈是线程私有的。</p>
<p>·    空间大小：堆大小远远大于栈。</p>
<h4 id="4-队列和栈是什么？有什么区别？"><a href="#4-队列和栈是什么？有什么区别？" class="headerlink" title="4. 队列和栈是什么？有什么区别？"></a><strong>4.</strong> <strong>队列和栈是什么？有什么区别？</strong></h4><p>队列和栈都是被用来预存储数据的。</p>
<p>队列允许先进先出检索元素，但也有例外的情况，Deque 接口允许从两端检索元素。</p>
<p>栈和队列很相似，但它运行对元素进行后进先出进行检索。</p>
<h4 id="5-什么是双亲委派模型？"><a href="#5-什么是双亲委派模型？" class="headerlink" title="5. 什么是双亲委派模型？"></a><strong>5.</strong> <strong>什么是双亲委派模型？</strong></h4><p>在介绍双亲委派模型之前先说下类加载器。对于任意一个类，都需要由加载它的类加载器和这个类本身一同确立在 JVM 中的唯一性，每一个类加载器，都有一个独立的类名称空间。类加载器就是根据指定全限定名称将 class 文件加载到 JVM 内存，然后再转化为 class 对象。</p>
<p>类加载器分类：</p>
<p>·    启动类加载器（Bootstrap ClassLoader），是虚拟机自身的一部分，用来加载Java_HOME/lib/目录中的，或者被 -Xbootclasspath 参数所指定的路径中并且被虚拟机识别的类库；</p>
<p>·    其他类加载器：</p>
<p>·    扩展类加载器（Extension ClassLoader）：负责加载<java_home>\lib\ext目录或Java. ext. dirs系统变量指定的路径中的所有类库；</java_home></p>
<p>·    应用程序类加载器（Application ClassLoader）。负责加载用户类路径（classpath）上的指定类库，我们可以直接使用这个类加载器。一般情况，如果我们没有自定义类加载器默认就是用这个加载器。</p>
<p>双亲委派模型：如果一个类加载器收到了类加载的请求，它首先不会自己去加载这个类，而是把这个请求委派给父类加载器去完成，每一层的类加载器都是如此，这样所有的加载请求都会被传送到顶层的启动类加载器中，只有当父加载无法完成加载请求（它的搜索范围中没找到所需的类）时，子加载器才会尝试去加载类。</p>
<h4 id="6-说一下类装载的执行过程？"><a href="#6-说一下类装载的执行过程？" class="headerlink" title="6. 说一下类装载的执行过程？"></a><strong>6.</strong> <strong>说一下类装载的执行过程？</strong></h4><p>类装载分为以下 5 个步骤：</p>
<p>·    加载：根据查找路径找到相应的 class 文件然后导入；</p>
<p>·    检查：检查加载的 class 文件的正确性；</p>
<p>·    准备：给类中的静态变量分配内存空间；</p>
<p>·    解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</p>
<p>·    初始化：对静态变量和静态代码块执行初始化工作。</p>
<h4 id="7-怎么判断对象是否可以被回收？"><a href="#7-怎么判断对象是否可以被回收？" class="headerlink" title="7. 怎么判断对象是否可以被回收？"></a><strong>7.</strong> <strong>怎么判断对象是否可以被回收？</strong></h4><p>一般有两种方法来判断：</p>
<p>·    引用计数器：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</p>
<p>·    可达性分析：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</p>
<h4 id="8-Java-中都有哪些引用类型？"><a href="#8-Java-中都有哪些引用类型？" class="headerlink" title="8. Java 中都有哪些引用类型？"></a><strong>8. Java</strong> <strong>中都有哪些引用类型？</strong></h4><p>·    强引用：发生 gc 的时候不会被回收。</p>
<p>·    软引用：有用但不是必须的对象，在发生内存溢出之前会被回收。</p>
<p>·    弱引用：有用但不是必须的对象，在下一次GC时会被回收。</p>
<p>·    虚引用（幽灵引用/幻影引用）：无法通过虚引用获得对象，用 PhantomReference 实现虚引用，虚引用的用途是在 gc 时返回一个通知。</p>
<h4 id="9-说一下-JVM-有哪些垃圾回收算法？"><a href="#9-说一下-JVM-有哪些垃圾回收算法？" class="headerlink" title="9. 说一下 JVM 有哪些垃圾回收算法？"></a><strong>9.</strong> <strong>说一下</strong> <strong>JVM</strong> <strong>有哪些垃圾回收算法？</strong></h4><p>·    标记-清除算法：标记无用对象，然后进行清除回收。缺点：效率不高，无法清除垃圾碎片。</p>
<p>·    标记-整理算法：标记无用对象，让所有存活的对象都向一端移动，然后直接清除掉端边界以外的内存。</p>
<p>·    复制算法：按照容量划分二个大小相等的内存区域，当一块用完的时候将活着的对象复制到另一块上，然后再把已使用的内存空间一次清理掉。缺点：内存使用率不高，只有原来的一半。</p>
<p>·    分代算法：根据对象存活周期的不同将内存划分为几块，一般是新生代和老年代，新生代基本采用复制算法，老年代采用标记整理算法。</p>
<h4 id="10-说一下-JVM-有哪些垃圾回收器？"><a href="#10-说一下-JVM-有哪些垃圾回收器？" class="headerlink" title="10. 说一下 JVM 有哪些垃圾回收器？"></a><strong>10.</strong> <strong>说一下</strong> <strong>JVM</strong> <strong>有哪些垃圾回收器？</strong></h4><p>·    Serial：最早的单线程串行垃圾回收器。</p>
<p>·    Serial Old：Serial 垃圾回收器的老年版本，同样也是单线程的，可以作为 CMS 垃圾回收器的备选预案。</p>
<p>·    ParNew：是 Serial 的多线程版本。</p>
<p>·    Parallel 和 ParNew 收集器类似是多线程的，但 Parallel 是吞吐量优先的收集器，可以牺牲等待时间换取系统的吞吐量。</p>
<p>·    Parallel Old 是 Parallel 老生代版本，Parallel 使用的是复制的内存回收算法，Parallel Old 使用的是标记-整理的内存回收算法。</p>
<p>·    CMS：一种以获得最短停顿时间为目标的收集器，非常适用 B/S 系统。</p>
<p>·    G1：一种兼顾吞吐量和停顿时间的 GC 实现，是 JDK 9 以后的默认 GC 选项。</p>
<h4 id="11-详细介绍一下-CMS-垃圾回收器？"><a href="#11-详细介绍一下-CMS-垃圾回收器？" class="headerlink" title="11. 详细介绍一下 CMS 垃圾回收器？"></a><strong>11.</strong> <strong>详细介绍一下</strong> <strong>CMS</strong> <strong>垃圾回收器？</strong></h4><p>CMS 是英文 Concurrent Mark-Sweep 的简称，是以牺牲吞吐量为代价来获得最短回收停顿时间的垃圾回收器。对于要求服务器响应速度的应用上，这种垃圾回收器非常适合。在启动 JVM 的参数加上“-XX:+UseConcMarkSweepGC”来指定使用 CMS 垃圾回收器。</p>
<p>CMS 使用的是标记-清除的算法实现的，所以在 gc 的时候回产生大量的内存碎片，当剩余内存不能满足程序运行要求时，系统将会出现 Concurrent Mode Failure，临时 CMS 会采用 Serial Old 回收器进行垃圾清除，此时的性能将会被降低。</p>
<h4 id="12-新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"><a href="#12-新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？" class="headerlink" title="12. 新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？"></a><strong>12.</strong> <strong>新生代垃圾回收器和老生代垃圾回收器都有哪些？有什么区别？</strong></h4><p>·    新生代回收器：Serial、ParNew、Parallel Scavenge</p>
<p>·    老年代回收器：Serial Old、Parallel Old、CMS</p>
<p>·    整堆回收器：G1</p>
<p>新生代垃圾回收器一般采用的是复制算法，复制算法的优点是效率高，缺点是内存利用率低；老年代回收器一般采用的是标记-整理的算法进行垃圾回收。</p>
<h4 id="13-简述分代垃圾回收器是怎么工作的？"><a href="#13-简述分代垃圾回收器是怎么工作的？" class="headerlink" title="13. 简述分代垃圾回收器是怎么工作的？"></a><strong>13.</strong> <strong>简述分代垃圾回收器是怎么工作的？</strong></h4><p>分代回收器有两个分区：老生代和新生代，新生代默认的空间占比总空间的 1/3，老生代的默认占比是 2/3。</p>
<p>新生代使用的是复制算法，新生代里有 3 个分区：Eden、To Survivor、From Survivor，它们的默认占比是 8:1:1，它的执行流程如下：</p>
<p>·    把 Eden + From Survivor 存活的对象放入 To Survivor 区；</p>
<p>·    清空 Eden 和 From Survivor 分区；</p>
<p>·    From Survivor 和 To Survivor 分区交换，From Survivor 变 To Survivor，To Survivor 变 From Survivor。</p>
<p>每次在 From Survivor 到 To Survivor 移动时都存活的对象，年龄就 +1，当年龄到达 15（默认配置是 15）时，升级为老生代。大对象也会直接进入老生代。</p>
<p>老生代当空间占用到达某个值之后就会触发全局垃圾收回，一般使用标记整理的执行算法。以上这些循环往复就构成了整个分代垃圾回收的整体执行流程。</p>
<h4 id="14-说一下-JVM-调优的工具？"><a href="#14-说一下-JVM-调优的工具？" class="headerlink" title="14. 说一下 JVM 调优的工具？"></a><strong>14.</strong> <strong>说一下</strong> <strong>JVM</strong> <strong>调优的工具？</strong></h4><p>JDK 自带了很多监控工具，都位于 JDK 的 bin 目录下，其中最常用的是 jconsole 和 jvisualvm 这两款视图监控工具。</p>
<p>·    jconsole：用于对 JVM 中的内存、线程和类等进行监控；</p>
<p>·    jvisualvm：JDK 自带的全能分析工具，可以分析：内存快照、线程快照、程序死锁、监控内存的变化、gc 变化等。</p>
<h4 id="15-常用的-JVM-调优的参数都有哪些？"><a href="#15-常用的-JVM-调优的参数都有哪些？" class="headerlink" title="15. 常用的 JVM 调优的参数都有哪些？"></a><strong>15.</strong> <strong>常用的</strong> <strong>JVM</strong> <strong>调优的参数都有哪些？</strong></h4><p>·    -Xms2g：初始化推大小为 2g；</p>
<p>·    -Xmx2g：堆最大内存为 2g；</p>
<p>·    -XX:NewRatio=4：设置年轻的和老年代的内存比例为 1:4；</p>
<p>·    -XX:SurvivorRatio=8：设置新生代 Eden 和 Survivor 比例为 8:2；</p>
<p>·    –XX:+UseParNewGC：指定使用 ParNew + Serial Old 垃圾回收器组合；</p>
<p>·    -XX:+UseParallelOldGC：指定使用 ParNew + ParNew Old 垃圾回收器组合；</p>
<p>·    -XX:+UseConcMarkSweepGC：指定使用 CMS + Serial Old 垃圾回收器组合；</p>
<p>·    -XX:+PrintGC：开启打印 gc 信息；</p>
<p>·    -XX:+PrintGCDetails：打印 gc 详细信息。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>java Redis 知识检验</title>
    <url>/2020/07/19/java-Redis-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-Redis-是什么？都有哪些使用场景？"><a href="#1-Redis-是什么？都有哪些使用场景？" class="headerlink" title="1. Redis 是什么？都有哪些使用场景？"></a><strong>1. Redis</strong> <strong>是什么？都有哪些使用场景？</strong></h4><p>Redis 是一个使用 C 语言开发的高速缓存数据库。</p>
<p>Redis 使用场景：</p>
<p>·    记录帖子点赞数、点击数、评论数；</p>
<p>·    缓存近期热帖；</p>
<p>·    缓存文章详情信息；</p>
<p>·    记录用户会话信息。</p>
<h4 id="2-Redis-有哪些功能？"><a href="#2-Redis-有哪些功能？" class="headerlink" title="2. Redis 有哪些功能？"></a><strong>2. Redis</strong> <strong>有哪些功能？</strong></h4><p>·    数据缓存功能</p>
<p>·    分布式锁的功能</p>
<p>·    支持数据持久化</p>
<p>·    支持事务</p>
<p>·    支持消息队列</p>
<h4 id="3-Redis-和-memcache-有什么区别？"><a href="#3-Redis-和-memcache-有什么区别？" class="headerlink" title="3. Redis 和 memcache 有什么区别？"></a><strong>3. Redis</strong> <strong>和</strong> <strong>memcache</strong> <strong>有什么区别？</strong></h4><p>·    存储方式不同：memcache 把数据全部存在内存之中，断电后会挂掉，数据不能超过内存大小；Redis 有部份存在硬盘上，这样能保证数据的持久性。</p>
<p>·    数据支持类型：memcache 对数据类型支持相对简单；Redis 有复杂的数据类型。</p>
<p>·    使用底层模型不同：它们之间底层实现方式，以及与客户端之间通信的应用协议不一样，Redis 自己构建了 vm 机制，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求。</p>
<p>·    value 值大小不同：Redis 最大可以达到 512mb；memcache 只有 1mb。</p>
<h4 id="4-Redis-为什么是单线程的？"><a href="#4-Redis-为什么是单线程的？" class="headerlink" title="4. Redis 为什么是单线程的？"></a><strong>4. Redis</strong> <strong>为什么是单线程的？</strong></h4><p>因为 cpu 不是 Redis 的瓶颈，Redis 的瓶颈最有可能是机器内存或者网络带宽。既然单线程容易实现，而且 cpu 又不会成为瓶颈，那就顺理成章地采用单线程的方案了。</p>
<p>关于 Redis 的性能，官方网站也有，普通笔记本轻松处理每秒几十万的请求。</p>
<p>而且单线程并不代表就慢 nginx 和 nodejs 也都是高性能单线程的代表。</p>
<h4 id="5-什么是缓存穿透？怎么解决？"><a href="#5-什么是缓存穿透？怎么解决？" class="headerlink" title="5. 什么是缓存穿透？怎么解决？"></a><strong>5.</strong> <strong>什么是缓存穿透？怎么解决？</strong></h4><p>缓存穿透：指查询一个一定不存在的数据，由于缓存是不命中时需要从数据库查询，查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到数据库去查询，造成缓存穿透。</p>
<p>解决方案：最简单粗暴的方法如果一个查询返回的数据为空（不管是数据不存在，还是系统故障），我们就把这个空结果进行缓存，但它的过期时间会很短，最长不超过五分钟。</p>
<h4 id="6-Redis-支持的数据类型有哪些？"><a href="#6-Redis-支持的数据类型有哪些？" class="headerlink" title="6. Redis 支持的数据类型有哪些？"></a><strong>6. Redis</strong> <strong>支持的数据类型有哪些？</strong></h4><p>Redis 支持的数据类型：string（字符串）、list（列表）、hash（字典）、set（集合）、zset（有序集合）。</p>
<h4 id="7-Redis-支持的-Java-客户端都有哪些？"><a href="#7-Redis-支持的-Java-客户端都有哪些？" class="headerlink" title="7. Redis 支持的 Java 客户端都有哪些？"></a><strong>7. Redis</strong> <strong>支持的</strong> <strong>Java</strong> <strong>客户端都有哪些？</strong></h4><p>支持的 Java 客户端有 Redisson、jedis、lettuce 等。</p>
<h4 id="8-jedis-和-Redisson-有哪些区别？"><a href="#8-jedis-和-Redisson-有哪些区别？" class="headerlink" title="8. jedis 和 Redisson 有哪些区别？"></a><strong>8. jedis</strong> <strong>和</strong> <strong>Redisson</strong> <strong>有哪些区别？</strong></h4><p>·    jedis：提供了比较全面的 Redis 命令的支持。</p>
<p>·    Redisson：实现了分布式和可扩展的 Java 数据结构，与 jedis 相比 Redisson 的功能相对简单，不支持排序、事务、管道、分区等 Redis 特性。</p>
<h4 id="9-怎么保证缓存和数据库数据的一致性？"><a href="#9-怎么保证缓存和数据库数据的一致性？" class="headerlink" title="9. 怎么保证缓存和数据库数据的一致性？"></a><strong>9.</strong> <strong>怎么保证缓存和数据库数据的一致性？</strong></h4><p>·    合理设置缓存的过期时间。</p>
<p>·    新增、更改、删除数据库操作时同步更新 Redis，可以使用事物机制来保证数据的一致性。</p>
<h4 id="10-Redis-持久化有几种方式？"><a href="#10-Redis-持久化有几种方式？" class="headerlink" title="10. Redis 持久化有几种方式？"></a><strong>10. Redis</strong> <strong>持久化有几种方式？</strong></h4><p>Redis 的持久化有两种方式，或者说有两种策略：</p>
<p>·    RDB（Redis Database）：指定的时间间隔能对你的数据进行快照存储。</p>
<p>·    AOF（Append Only File）：每一个收到的写命令都通过write函数追加到文件中。</p>
<h4 id="11-Redis-怎么实现分布式锁？"><a href="#11-Redis-怎么实现分布式锁？" class="headerlink" title="11. Redis 怎么实现分布式锁？"></a><strong>11. Redis</strong> <strong>怎么实现分布式锁？</strong></h4><p>Redis 分布式锁其实就是在系统里面占一个“坑”，其他程序也要占“坑”的时候，占用成功了就可以继续执行，失败了就只能放弃或稍后重试。</p>
<p>占坑一般使用 setnx(set if not exists)指令，只允许被一个程序占有，使用完调用 del 释放锁。</p>
<h4 id="12-Redis-分布式锁有什么缺陷？"><a href="#12-Redis-分布式锁有什么缺陷？" class="headerlink" title="12. Redis 分布式锁有什么缺陷？"></a><strong>12. Redis</strong> <strong>分布式锁有什么缺陷？</strong></h4><p>Redis 分布式锁不能解决超时的问题，分布式锁有一个超时时间，程序的执行如果超出了锁的超时时间就会出现问题。</p>
<h4 id="13-Redis-如何做内存优化？"><a href="#13-Redis-如何做内存优化？" class="headerlink" title="13. Redis 如何做内存优化？"></a><strong>13. Redis</strong> <strong>如何做内存优化？</strong></h4><p>尽量使用 Redis 的散列表，把相关的信息放到散列表里面存储，而不是把每个字段单独存储，这样可以有效的减少内存使用。比如将 Web 系统的用户对象，应该放到散列表里面再整体存储到 Redis，而不是把用户的姓名、年龄、密码、邮箱等字段分别设置 key 进行存储。</p>
<h4 id="14-Redis-淘汰策略有哪些？"><a href="#14-Redis-淘汰策略有哪些？" class="headerlink" title="14. Redis 淘汰策略有哪些？"></a><strong>14. Redis</strong> <strong>淘汰策略有哪些？</strong></h4><p>·   volatile-lru：从已设置过期时间的数据集（server. db[i]. expires）中挑选最近最少使用的数据淘汰。</p>
<p>·   volatile-ttl：从已设置过期时间的数据集（server. db[i]. expires）中挑选将要过期的数据淘汰。</p>
<p>·   volatile-random：从已设置过期时间的数据集（server. db[i]. expires）中任意选择数据淘汰。</p>
<p>·   allkeys-lru：从数据集（server. db[i]. dict）中挑选最近最少使用的数据淘汰。</p>
<p>·   allkeys-random：从数据集（server. db[i]. dict）中任意选择数据淘汰。</p>
<p>·   no-enviction（驱逐）：禁止驱逐数据。</p>
<p><strong>15. Redis</strong> <strong>常见的性能问题有哪些？该如何解决？</strong></p>
<p>·    主服务器写内存快照，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以主服务器最好不要写内存快照。</p>
<p>·    Redis 主从复制的性能问题，为了主从复制的速度和连接的稳定性，主从库最好在同一个局域网内</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>Redis</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>java Mysql 知识检验</title>
    <url>/2020/07/19/java-Mysql-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-数据库的三范式是什么？"><a href="#1-数据库的三范式是什么？" class="headerlink" title="1. 数据库的三范式是什么？"></a><strong>1.</strong> <strong>数据库的三范式是什么？</strong></h4><p>·    第一范式：强调的是列的原子性，即数据库表的每一列都是不可分割的原子数据项。</p>
<p>·    第二范式：要求实体的属性完全依赖于主关键字。所谓完全依赖是指不能存在仅依赖主关键字一部分的属性。</p>
<p>·    第三范式：任何非主属性不依赖于其它非主属性。</p>
<h4 id="2-一张自增表里面总共有-7-条数据，删除了最后-2-条数据，重启-MySQL-数据库，又插入了一条数据，此时-id-是几？"><a href="#2-一张自增表里面总共有-7-条数据，删除了最后-2-条数据，重启-MySQL-数据库，又插入了一条数据，此时-id-是几？" class="headerlink" title="2. 一张自增表里面总共有 7 条数据，删除了最后 2 条数据，重启 MySQL 数据库，又插入了一条数据，此时 id 是几？"></a><strong>2.</strong> <strong>一张自增表里面总共有</strong> <strong>7</strong> <strong>条数据，删除了最后</strong> <strong>2</strong> <strong>条数据，重启</strong> <strong>MySQL</strong> <strong>数据库，又插入了一条数据，此时</strong> <strong>id</strong> <strong>是几？</strong></h4><p>·    表类型如果是 MyISAM ，那 id 就是 8。</p>
<p>·    表类型如果是 InnoDB，那 id 就是 6。</p>
<p>InnoDB 表只会把自增主键的最大 id 记录在内存中，所以重启之后会导致最大 id 丢失。</p>
<h4 id="3-如何获取当前数据库版本？"><a href="#3-如何获取当前数据库版本？" class="headerlink" title="3. 如何获取当前数据库版本？"></a><strong>3.</strong> <strong>如何获取当前数据库版本？</strong></h4><p>使用 select version() 获取当前 MySQL 数据库版本。</p>
<h4 id="4-说一下-ACID-是什么？"><a href="#4-说一下-ACID-是什么？" class="headerlink" title="4. 说一下 ACID 是什么？"></a><strong>4.</strong> <strong>说一下</strong> <strong>ACID</strong> <strong>是什么？</strong></h4><p>·    Atomicity（原子性）：一个事务（transaction）中的所有操作，或者全部完成，或者全部不完成，不会结束在中间某个环节。事务在执行过程中发生错误，会被恢复（Rollback）到事务开始前的状态，就像这个事务从来没有执行过一样。即，事务不可分割、不可约简。</p>
<p>·    Consistency（一致性）：在事务开始之前和事务结束以后，数据库的完整性没有被破坏。这表示写入的资料必须完全符合所有的预设约束、触发器、级联回滚等。</p>
<p>·    Isolation（隔离性）：数据库允许多个并发事务同时对其数据进行读写和修改的能力，隔离性可以防止多个事务并发执行时由于交叉执行而导致数据的不一致。事务隔离分为不同级别，包括读未提交（Read uncommitted）、读提交（read committed）、可重复读（repeatable read）和串行化（Serializable）。</p>
<p>·    Durability（持久性）：事务处理结束后，对数据的修改就是永久的，即便系统故障也不会丢失。</p>
<h4 id="5-char-和-varchar-的区别是什么？"><a href="#5-char-和-varchar-的区别是什么？" class="headerlink" title="5. char 和 varchar 的区别是什么？"></a><strong>5. char</strong> <strong>和</strong> <strong>varchar</strong> <strong>的区别是什么？</strong></h4><p>·    char(n) ：固定长度类型，比如订阅 char(10)，当你输入”abc”三个字符的时候，它们占的空间还是 10 个字节，其他 7 个是空字节。</p>
<p>chat 优点：效率高；缺点：占用空间；适用场景：存储密码的 md5 值，固定长度的，使用 char 非常合适。</p>
<p>·    varchar(n) ：可变长度，存储的值是每个值占用的字节再加上一个用来记录其长度的字节的长度。</p>
<p>所以，从空间上考虑 varcahr 比较合适；从效率上考虑 char 比较合适，二者使用需要权衡。</p>
<h4 id="6-float-和-double-的区别是什么？"><a href="#6-float-和-double-的区别是什么？" class="headerlink" title="6. float 和 double 的区别是什么？"></a><strong>6. float</strong> <strong>和</strong> <strong>double</strong> <strong>的区别是什么？</strong></h4><p>·    float 最多可以存储 8 位的十进制数，并在内存中占 4 字节。</p>
<p>·    double 最可可以存储 16 位的十进制数，并在内存中占 8 字节。</p>
<h4 id="7-MySQL-的内连接、左连接、右连接有什么区别？"><a href="#7-MySQL-的内连接、左连接、右连接有什么区别？" class="headerlink" title="7. MySQL 的内连接、左连接、右连接有什么区别？"></a><strong>7. MySQL</strong> <strong>的内连接、左连接、右连接有什么区别？</strong></h4><p>内连接关键字：inner join；左连接：left join；右连接：right join。</p>
<p>内连接是把匹配的关联数据显示出来；左连接是左边的表全部显示出来，右边的表显示出符合条件的数据；右连接正好相反。</p>
<h4 id="8-MySQL-索引是怎么实现的？"><a href="#8-MySQL-索引是怎么实现的？" class="headerlink" title="8. MySQL 索引是怎么实现的？"></a><strong>8. MySQL</strong> <strong>索引是怎么实现的？</strong></h4><p>索引是满足某种特定查找算法的数据结构，而这些数据结构会以某种方式指向数据，从而实现高效查找数据。</p>
<p>具体来说 MySQL 中的索引，不同的数据引擎实现有所不同，但目前主流的数据库引擎的索引都是 B+ 树实现的，B+ 树的搜索效率，可以到达二分法的性能，找到数据区域之后就找到了完整的数据结构了，所有索引的性能也是更好的。</p>
<h4 id="9-怎么验证-MySQL-的索引是否满足需求？"><a href="#9-怎么验证-MySQL-的索引是否满足需求？" class="headerlink" title="9. 怎么验证 MySQL 的索引是否满足需求？"></a><strong>9.</strong> <strong>怎么验证</strong> <strong>MySQL</strong> <strong>的索引是否满足需求？</strong></h4><p>使用 explain 查看 SQL 是如何执行查询语句的，从而分析你的索引是否满足需求。</p>
<p>explain 语法：explain select * from table where type=1。</p>
<h4 id="10-说一下数据库的事务隔离？"><a href="#10-说一下数据库的事务隔离？" class="headerlink" title="10. 说一下数据库的事务隔离？"></a><strong>10.</strong> <strong>说一下数据库的事务隔离？</strong></h4><p>MySQL 的事务隔离是在 MySQL. ini 配置文件里添加的，在文件的最后添加：</p>
<p>transaction-isolation = REPEATABLE-READ</p>
<p>可用的配置值：READ-UNCOMMITTED、READ-COMMITTED、REPEATABLE-READ、SERIALIZABLE。</p>
<p>·    READ-UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）。</p>
<p>·    READ-COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读）。</p>
<p>·    REPEATABLE-READ：可重复读，默认级别，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读）。</p>
<p>·    SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</p>
<p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p>
<p>不可重复读 ：是指在一个事务内，多次读同一数据。</p>
<p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p>
<h4 id="11-说一下-MySQL-常用的引擎？"><a href="#11-说一下-MySQL-常用的引擎？" class="headerlink" title="11. 说一下 MySQL 常用的引擎？"></a><strong>11.</strong> <strong>说一下</strong> <strong>MySQL</strong> <strong>常用的引擎？</strong></h4><p>·   InnoDB 引擎：mysql 5.1 后默认的数据库引擎，提供了对数据库 acid 事务的支持，并且还提供了行级锁和外键的约束，它的设计的目标就是处理大数据容量的数据库系统。MySQL 运行的时候，InnoDB 会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎是不支持全文搜索，同时启动也比较的慢，它是不会保存表的行数的，所以当进行 select count(*) from table 指令的时候，需要进行扫描全表。由于锁的粒度小，写操作是不会锁定全表的,所以在并发度较高的场景下使用会提升效率的。</p>
<p>·   MyIASM 引擎：不提供事务的支持，也不支持行级锁和外键。因此当执行插入和更新语句时，即执行写操作的时候需要锁定这个表，所以会导致效率会降低。不过和 InnoDB 不同的是，MyIASM 引擎是保存了表的行数，于是当进行 select count(*) from table 语句时，可以直接的读取已经保存的值而不需要进行扫描全表。所以，如果表的读操作远远多于写操作时，并且不需要事务的支持的，可以将 MyIASM 作为数据库引擎的首选。</p>
<h4 id="12-说一下-MySQL-的行锁和表锁？"><a href="#12-说一下-MySQL-的行锁和表锁？" class="headerlink" title="12. 说一下 MySQL 的行锁和表锁？"></a><strong>12.</strong> <strong>说一下</strong> <strong>MySQL</strong> <strong>的行锁和表锁？</strong></h4><p>MyISAM 只支持表锁，InnoDB 支持表锁和行锁，默认为行锁。</p>
<p>·    表级锁：开销小，加锁快，不会出现死锁。锁定粒度大，发生锁冲突的概率最高，并发量最低。</p>
<p>·    行级锁：开销大，加锁慢，会出现死锁。锁力度小，发生锁冲突的概率小，并发度最高。</p>
<h4 id="13-说一下乐观锁和悲观锁？"><a href="#13-说一下乐观锁和悲观锁？" class="headerlink" title="13. 说一下乐观锁和悲观锁？"></a><strong>13.</strong> <strong>说一下乐观锁和悲观锁？</strong></h4><p>·    乐观锁：每次去拿数据的时候都认为别人不会修改，所以不会上锁，但是在提交更新的时候会判断一下在此期间别人有没有去更新这个数据。</p>
<p>·    悲观锁：每次去拿数据的时候都认为别人会修改，所以每次在拿数据的时候都会上锁，这样别人想拿这个数据就会阻止，直到这个锁被释放。</p>
<p>数据库的乐观锁需要自己实现，在表里面添加一个 version 字段，每次修改成功值加 1，这样每次修改的时候先对比一下，自己拥有的 version 和数据库现在的 version 是否一致，如果不一致就不修改，这样就实现了乐观锁。</p>
<h4 id="14-MySQL-问题排查都有哪些手段？"><a href="#14-MySQL-问题排查都有哪些手段？" class="headerlink" title="14. MySQL 问题排查都有哪些手段？"></a><strong>14. MySQL</strong> <strong>问题排查都有哪些手段？</strong></h4><p>·    使用 show processlist 命令查看当前所有连接信息。</p>
<p>·    使用 explain 命令查询 SQL 语句执行计划。</p>
<p>·    开启慢查询日志，查看慢查询的 SQL。</p>
<h4 id="15-如何做-MySQL-的性能优化？"><a href="#15-如何做-MySQL-的性能优化？" class="headerlink" title="15. 如何做 MySQL 的性能优化？"></a><strong>15.</strong> <strong>如何做</strong> <strong>MySQL</strong> <strong>的性能优化？</strong></h4><p>·    为搜索字段创建索引。</p>
<p>·    避免使用 select *，列出需要查询的字段。</p>
<p>·    垂直分割分表。</p>
<p>·    选择正确的存储引擎。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>数据库</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>java Zookeeper 知识检验</title>
    <url>/2020/07/19/java-Zookeeper-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-zookeeper-是什么？"><a href="#1-zookeeper-是什么？" class="headerlink" title="1. zookeeper 是什么？"></a><strong>1. zookeeper</strong> <strong>是什么？</strong></h4><p>zookeeper 是一个分布式的，开放源码的分布式应用程序协调服务，是 google chubby 的开源实现，是 hadoop 和 hbase 的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<h4 id="2-zookeeper-都有哪些功能？"><a href="#2-zookeeper-都有哪些功能？" class="headerlink" title="2. zookeeper 都有哪些功能？"></a><strong>2. zookeeper</strong> <strong>都有哪些功能？</strong></h4><p>·    集群管理：监控节点存活状态、运行请求等。</p>
<p>·    主节点选举：主节点挂掉了之后可以从备用的节点开始新一轮选主，主节点选举说的就是这个选举的过程，使用 zookeeper 可以协助完成这个过程。</p>
<p>·    分布式锁：zookeeper 提供两种锁：独占锁、共享锁。独占锁即一次只能有一个线程使用资源，共享锁是读锁共享，读写互斥，即可以有多线线程同时读同一个资源，如果要使用写锁也只能有一个线程使用。zookeeper可以对分布式锁进行控制。</p>
<p>·    命名服务：在分布式系统中，通过使用命名服务，客户端应用能够根据指定名字来获取资源或服务的地址，提供者等信息。</p>
<h4 id="3-zookeeper-有几种部署模式？"><a href="#3-zookeeper-有几种部署模式？" class="headerlink" title="3. zookeeper 有几种部署模式？"></a><strong>3. zookeeper</strong> <strong>有几种部署模式？</strong></h4><p>zookeeper 有三种部署模式：</p>
<p>·    单机部署：一台集群上运行；</p>
<p>·    集群部署：多台集群运行；</p>
<p>·    伪集群部署：一台集群启动多个 zookeeper 实例运行。</p>
<h4 id="4-zookeeper-怎么保证主从节点的状态同步？"><a href="#4-zookeeper-怎么保证主从节点的状态同步？" class="headerlink" title="4. zookeeper 怎么保证主从节点的状态同步？"></a><strong>4. zookeeper</strong> <strong>怎么保证主从节点的状态同步？</strong></h4><p>zookeeper 的核心是原子广播，这个机制保证了各个 server 之间的同步。实现这个机制的协议叫做 zab 协议。 zab 协议有两种模式，分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，zab 就进入了恢复模式，当领导者被选举出来，且大多数 server 完成了和 leader 的状态同步以后，恢复模式就结束了。状态同步保证了 leader 和 server 具有相同的系统状态。</p>
<h4 id="5-集群中为什么要有主节点？"><a href="#5-集群中为什么要有主节点？" class="headerlink" title="5. 集群中为什么要有主节点？"></a><strong>5.</strong> <strong>集群中为什么要有主节点？</strong></h4><p>在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，所以就需要主节点。</p>
<h4 id="6-集群中有-3-台服务器，其中一个节点宕机，这个时候-zookeeper-还可以使用吗？"><a href="#6-集群中有-3-台服务器，其中一个节点宕机，这个时候-zookeeper-还可以使用吗？" class="headerlink" title="6. 集群中有 3 台服务器，其中一个节点宕机，这个时候 zookeeper 还可以使用吗？"></a><strong>6.</strong> <strong>集群中有</strong> <strong>3</strong> <strong>台服务器，其中一个节点宕机，这个时候</strong> <strong>zookeeper</strong> <strong>还可以使用吗？</strong></h4><p>可以继续使用，单数服务器只要没超过一半的服务器宕机就可以继续使用。</p>
<h4 id="7-说一下-zookeeper-的通知机制？"><a href="#7-说一下-zookeeper-的通知机制？" class="headerlink" title="7. 说一下 zookeeper 的通知机制？"></a><strong>7.</strong> <strong>说一下</strong> <strong>zookeeper</strong> <strong>的通知机制？</strong></h4><p>客户端端会对某个 znode 建立一个 watcher 事件，当该 znode 发生变化时，这些客户端会收到 zookeeper 的通知，然后客户端可以根据 znode 变化来做出业务上的改变。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>Zookeeper</tag>
      </tags>
  </entry>
  <entry>
    <title>java Kafka 知识检验</title>
    <url>/2020/07/19/java-Kafka-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-kafka-可以脱离-zookeeper-单独使用吗？为什么？"><a href="#1-kafka-可以脱离-zookeeper-单独使用吗？为什么？" class="headerlink" title="1. kafka 可以脱离 zookeeper 单独使用吗？为什么？"></a><strong>1. kafka</strong> <strong>可以脱离</strong> <strong>zookeeper</strong> <strong>单独使用吗？为什么？</strong></h4><p>kafka 不能脱离 zookeeper 单独使用，因为 kafka 使用 zookeeper 管理和协调 kafka 的节点服务器。</p>
<h4 id="2-kafka-有几种数据保留的策略？"><a href="#2-kafka-有几种数据保留的策略？" class="headerlink" title="2. kafka 有几种数据保留的策略？"></a><strong>2. kafka</strong> <strong>有几种数据保留的策略？</strong></h4><p>kafka 有两种数据保存策略：按照过期时间保留和按照存储的消息大小保留。</p>
<h4 id="3-kafka-同时设置了-7-天和-10G-清除数据，到第五天的时候消息达到了-10G-，这个时候-kafka-将如何处理？"><a href="#3-kafka-同时设置了-7-天和-10G-清除数据，到第五天的时候消息达到了-10G-，这个时候-kafka-将如何处理？" class="headerlink" title="3. kafka 同时设置了 7 天和 10G 清除数据，到第五天的时候消息达到了 10G**，这个时候** kafka 将如何处理？"></a><strong>3. kafka</strong> <strong>同时设置了</strong> <strong>7</strong> <strong>天和</strong> <strong>10G</strong> <strong>清除数据，到第五天的时候消息达到了</strong> <strong>10G**</strong>，这个时候** <strong>kafka</strong> <strong>将如何处理？</strong></h4><p>这个时候 kafka 会执行数据清除工作，时间和大小不论那个满足条件，都会清空数据。</p>
<h4 id="4-什么情况会导致-kafka-运行变慢？"><a href="#4-什么情况会导致-kafka-运行变慢？" class="headerlink" title="4. 什么情况会导致 kafka 运行变慢？"></a><strong>4.</strong> <strong>什么情况会导致</strong> <strong>kafka</strong> <strong>运行变慢？</strong></h4><p>·    cpu 性能瓶颈</p>
<p>·    磁盘读写瓶颈</p>
<p>·    网络瓶颈</p>
<h4 id="5-使用-kafka-集群需要注意什么？"><a href="#5-使用-kafka-集群需要注意什么？" class="headerlink" title="5. 使用 kafka 集群需要注意什么？"></a><strong>5.</strong> <strong>使用</strong> <strong>kafka</strong> <strong>集群需要注意什么？</strong></h4><p>·    集群的数量不是越多越好，最好不要超过 7 个，因为节点越多，消息复制需要的时间就越长，整个群组的吞吐量就越低。</p>
<p>·    集群数量最好是单数，因为超过一半故障集群就不能用了，设置为单数容错率更高。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>消息队列</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>java RabbitMQ 知识检验</title>
    <url>/2020/07/19/java-RabbitMQ-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-RabbitMQ-的使用场景有哪些？"><a href="#1-RabbitMQ-的使用场景有哪些？" class="headerlink" title="1. RabbitMQ 的使用场景有哪些？"></a><strong>1. RabbitMQ</strong> <strong>的使用场景有哪些？</strong></h4><p>·    抢购活动，削峰填谷，防止系统崩塌。</p>
<p>·    延迟信息处理，比如 10 分钟之后给下单未付款的用户发送邮件提醒。</p>
<p>·    解耦系统，对于新增的功能可以单独写模块扩展，比如用户确认评价之后，新增了给用户返积分的功能，这个时候不用在业务代码里添加新增积分的功能，只需要把新增积分的接口订阅确认评价的消息队列即可，后面再添加任何功能只需要订阅对应的消息队列即可。</p>
<h4 id="2-RabbitMQ-有哪些重要的角色？"><a href="#2-RabbitMQ-有哪些重要的角色？" class="headerlink" title="2. RabbitMQ 有哪些重要的角色？"></a><strong>2. RabbitMQ</strong> <strong>有哪些重要的角色？</strong></h4><p>RabbitMQ 中重要的角色有：生产者、消费者和代理：</p>
<p>·    生产者：消息的创建者，负责创建和推送数据到消息服务器；</p>
<p>·    消费者：消息的接收方，用于处理数据和确认消息；</p>
<p>·    代理：就是 RabbitMQ 本身，用于扮演“快递”的角色，本身不生产消息，只是扮演“快递”的角色。</p>
<h4 id="3-RabbitMQ-有哪些重要的组件？"><a href="#3-RabbitMQ-有哪些重要的组件？" class="headerlink" title="3. RabbitMQ 有哪些重要的组件？"></a><strong>3. RabbitMQ</strong> <strong>有哪些重要的组件？</strong></h4><p>·    ConnectionFactory（连接管理器）：应用程序与Rabbit之间建立连接的管理器，程序代码中使用。</p>
<p>·    Channel（信道）：消息推送使用的通道。</p>
<p>·    Exchange（交换器）：用于接受、分配消息。</p>
<p>·    Queue（队列）：用于存储生产者的消息。</p>
<p>·    RoutingKey（路由键）：用于把生成者的数据分配到交换器上。</p>
<p>·    BindingKey（绑定键）：用于把交换器的消息绑定到队列上。</p>
<h4 id="4-RabbitMQ-中-vhost-的作用是什么？"><a href="#4-RabbitMQ-中-vhost-的作用是什么？" class="headerlink" title="4. RabbitMQ 中 vhost 的作用是什么？"></a><strong>4. RabbitMQ</strong> <strong>中</strong> <strong>vhost</strong> <strong>的作用是什么？</strong></h4><p>vhost：每个 RabbitMQ 都能创建很多 vhost，我们称之为虚拟主机，每个虚拟主机其实都是 mini 版的RabbitMQ，它拥有自己的队列，交换器和绑定，拥有自己的权限机制。</p>
<h4 id="5-RabbitMQ-的消息是怎么发送的？"><a href="#5-RabbitMQ-的消息是怎么发送的？" class="headerlink" title="5. RabbitMQ 的消息是怎么发送的？"></a><strong>5. RabbitMQ</strong> <strong>的消息是怎么发送的？</strong></h4><p>首先客户端必须连接到 RabbitMQ 服务器才能发布和消费消息，客户端和 rabbit server 之间会创建一个 tcp 连接，一旦 tcp 打开并通过了认证（认证就是你发送给 rabbit 服务器的用户名和密码），你的客户端和 RabbitMQ 就创建了一条 amqp 信道（channel），信道是创建在“真实” tcp 上的虚拟连接，amqp 命令都是通过信道发送出去的，每个信道都会有一个唯一的 id，不论是发布消息，订阅队列都是通过这个信道完成的。</p>
<h4 id="6-RabbitMQ-怎么保证消息的稳定性？"><a href="#6-RabbitMQ-怎么保证消息的稳定性？" class="headerlink" title="6. RabbitMQ 怎么保证消息的稳定性？"></a><strong>6. RabbitMQ</strong> <strong>怎么保证消息的稳定性？</strong></h4><p>·    提供了事务的功能。</p>
<p>·    通过将 channel 设置为 confirm（确认）模式。</p>
<h4 id="7-RabbitMQ-怎么避免消息丢失？"><a href="#7-RabbitMQ-怎么避免消息丢失？" class="headerlink" title="7. RabbitMQ 怎么避免消息丢失？"></a><strong>7. RabbitMQ</strong> <strong>怎么避免消息丢失？</strong></h4><p>·    把消息持久化磁盘，保证服务器重启消息不丢失。</p>
<p>·    每个集群中至少有一个物理磁盘，保证消息落入磁盘。</p>
<h4 id="8-要保证消息持久化成功的条件有哪些？"><a href="#8-要保证消息持久化成功的条件有哪些？" class="headerlink" title="8. 要保证消息持久化成功的条件有哪些？"></a><strong>8.</strong> <strong>要保证消息持久化成功的条件有哪些？</strong></h4><p>·    声明队列必须设置持久化 durable 设置为 true.</p>
<p>·    消息推送投递模式必须设置持久化，deliveryMode 设置为 2（持久）。</p>
<p>·    消息已经到达持久化交换器。</p>
<p>·    消息已经到达持久化队列。</p>
<p>以上四个条件都满足才能保证消息持久化成功。</p>
<h4 id="9-RabbitMQ-持久化有什么缺点？"><a href="#9-RabbitMQ-持久化有什么缺点？" class="headerlink" title="9. RabbitMQ 持久化有什么缺点？"></a><strong>9. RabbitMQ</strong> <strong>持久化有什么缺点？</strong></h4><p>持久化的缺地就是降低了服务器的吞吐量，因为使用的是磁盘而非内存存储，从而降低了吞吐量。可尽量使用 ssd 硬盘来缓解吞吐量的问题。</p>
<h4 id="10-RabbitMQ-有几种广播类型？"><a href="#10-RabbitMQ-有几种广播类型？" class="headerlink" title="10. RabbitMQ 有几种广播类型？"></a><strong>10. RabbitMQ</strong> <strong>有几种广播类型？</strong></h4><p>·    direct（默认方式）：最基础最简单的模式，发送方把消息发送给订阅方，如果有多个订阅者，默认采取轮询的方式进行消息发送。</p>
<p>·    headers：与 direct 类似，只是性能很差，此类型几乎用不到。</p>
<p>·    fanout：分发模式，把消费分发给所有订阅者。</p>
<p>·    topic：匹配订阅模式，使用正则匹配到消息队列，能匹配到的都能接收到。</p>
<h4 id="11-RabbitMQ-怎么实现延迟消息队列？"><a href="#11-RabbitMQ-怎么实现延迟消息队列？" class="headerlink" title="11. RabbitMQ 怎么实现延迟消息队列？"></a><strong>11. RabbitMQ</strong> <strong>怎么实现延迟消息队列？</strong></h4><p>延迟队列的实现有两种方式：</p>
<p>·    通过消息过期后进入死信交换器，再由交换器转发到延迟消费队列，实现延迟功能；</p>
<p>·    使用 RabbitMQ-delayed-message-exchange 插件实现延迟功能。</p>
<h4 id="12-RabbitMQ-集群有什么用？"><a href="#12-RabbitMQ-集群有什么用？" class="headerlink" title="12. RabbitMQ 集群有什么用？"></a><strong>12. RabbitMQ</strong> <strong>集群有什么用？</strong></h4><p>集群主要有以下两个用途：</p>
<p>·    高可用：某个服务器出现问题，整个 RabbitMQ 还可以继续使用；</p>
<p>·    高容量：集群可以承载更多的消息量。</p>
<h4 id="13-RabbitMQ-节点的类型有哪些？"><a href="#13-RabbitMQ-节点的类型有哪些？" class="headerlink" title="13. RabbitMQ 节点的类型有哪些？"></a><strong>13. RabbitMQ</strong> <strong>节点的类型有哪些？</strong></h4><p>·    磁盘节点：消息会存储到磁盘。</p>
<p>·    内存节点：消息都存储在内存中，重启服务器消息丢失，性能高于磁盘类型。</p>
<h4 id="14-RabbitMQ-集群搭建需要注意哪些问题？"><a href="#14-RabbitMQ-集群搭建需要注意哪些问题？" class="headerlink" title="14. RabbitMQ 集群搭建需要注意哪些问题？"></a><strong>14. RabbitMQ</strong> <strong>集群搭建需要注意哪些问题？</strong></h4><p>·    各节点之间使用“–link”连接，此属性不能忽略。</p>
<p>·    各节点使用的 erlang cookie 值必须相同，此值相当于“秘钥”的功能，用于各节点的认证。</p>
<p>·    整个集群中必须包含一个磁盘节点。</p>
<h4 id="15-RabbitMQ-每个节点是其他节点的完整拷贝吗？为什么？"><a href="#15-RabbitMQ-每个节点是其他节点的完整拷贝吗？为什么？" class="headerlink" title="15. RabbitMQ 每个节点是其他节点的完整拷贝吗？为什么？"></a><strong>15. RabbitMQ</strong> <strong>每个节点是其他节点的完整拷贝吗？为什么？</strong></h4><p>不是，原因有以下两个：</p>
<p>·    存储空间的考虑：如果每个节点都拥有所有队列的完全拷贝，这样新增节点不但没有新增存储空间，反而增加了更多的冗余数据；</p>
<p>·    性能的考虑：如果每条消息都需要完整拷贝到每一个集群节点，那新增节点并没有提升处理消息的能力，最多是保持和单节点相同的性能甚至是更糟。</p>
<h4 id="16-RabbitMQ-集群中唯一一个磁盘节点崩溃了会发生什么情况？"><a href="#16-RabbitMQ-集群中唯一一个磁盘节点崩溃了会发生什么情况？" class="headerlink" title="16. RabbitMQ 集群中唯一一个磁盘节点崩溃了会发生什么情况？"></a><strong>16. RabbitMQ</strong> <strong>集群中唯一一个磁盘节点崩溃了会发生什么情况？</strong></h4><p>如果唯一磁盘的磁盘节点崩溃了，不能进行以下操作：</p>
<p>·    不能创建队列</p>
<p>·    不能创建交换器</p>
<p>·    不能创建绑定</p>
<p>·    不能添加用户</p>
<p>·    不能更改权限</p>
<p>·    不能添加和删除集群节点</p>
<p>唯一磁盘节点崩溃了，集群是可以保持运行的，但你不能更改任何东西。</p>
<h4 id="17-RabbitMQ-对集群节点停止顺序有要求吗？"><a href="#17-RabbitMQ-对集群节点停止顺序有要求吗？" class="headerlink" title="17. RabbitMQ 对集群节点停止顺序有要求吗？"></a><strong>17. RabbitMQ</strong> <strong>对集群节点停止顺序有要求吗？</strong></h4><p>RabbitMQ 对集群的停止的顺序是有要求的，应该先关闭内存节点，最后再关闭磁盘节点。如果顺序恰好相反的话，可能会造成消息的丢失。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>RabbitMQ</tag>
        <tag>消息队列</tag>
      </tags>
  </entry>
  <entry>
    <title>java Mybatis 知识检验</title>
    <url>/2020/07/19/java-Mybatis-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-MyBatis-中-和-的区别是什么？"><a href="#1-MyBatis-中-和-的区别是什么？" class="headerlink" title="1. MyBatis 中 #{}和** ${}**的区别是什么？"></a><strong>1. MyBatis</strong> <strong>中</strong> <strong>#{}</strong>和** ${}**的区别是什么？</h4><p>#{}是预编译处理，${}是字符替换。 在使用 #{}时，MyBatis 会将 SQL 中的 #{}替换成“?”，配合 PreparedStatement 的 set 方法赋值，这样可以有效的防止 SQL 注入，保证程序的运行安全。</p>
<h4 id="2-MyBatis-有几种分页方式？"><a href="#2-MyBatis-有几种分页方式？" class="headerlink" title="2. MyBatis 有几种分页方式？"></a><strong>2. MyBatis</strong> <strong>有几种分页方式？</strong></h4><p>分页方式：逻辑分页和物理分页。</p>
<p>逻辑分页： 使用 MyBatis 自带的 RowBounds 进行分页，它是一次性查询很多数据，然后在数据中再进行检索。</p>
<p>物理分页： 自己手写 SQL 分页或使用分页插件 PageHelper，去数据库查询指定条数的分页数据的形式。</p>
<h4 id="3-RowBounds-是一次性查询全部结果吗？为什么？"><a href="#3-RowBounds-是一次性查询全部结果吗？为什么？" class="headerlink" title="3. RowBounds 是一次性查询全部结果吗？为什么？"></a><strong>3. RowBounds</strong> <strong>是一次性查询全部结果吗？为什么？</strong></h4><p>RowBounds 表面是在“所有”数据中检索数据，其实并非是一次性查询出所有数据，因为 MyBatis 是对 jdbc 的封装，在 jdbc 驱动中有一个 Fetch Size 的配置，它规定了每次最多从数据库查询多少条数据，假如你要查询更多数据，它会在你执行 next()的时候，去查询更多的数据。就好比你去自动取款机取 10000 元，但取款机每次最多能取 2500 元，所以你要取 4 次才能把钱取完。只是对于 jdbc 来说，当你调用 next()的时候会自动帮你完成查询工作。这样做的好处可以有效的防止内存溢出。</p>
<p>Fetch Size 官方相关文档：<a href="http://t" target="_blank" rel="noopener">http://t</a>. cn/EfSE2g3</p>
<h4 id="4-MyBatis-逻辑分页和物理分页的区别是什么？"><a href="#4-MyBatis-逻辑分页和物理分页的区别是什么？" class="headerlink" title="4. MyBatis 逻辑分页和物理分页的区别是什么？"></a><strong>4. MyBatis</strong> <strong>逻辑分页和物理分页的区别是什么？</strong></h4><p>·    逻辑分页是一次性查询很多数据，然后再在结果中检索分页的数据。这样做弊端是需要消耗大量的内存、有内存溢出的风险、对数据库压力较大。</p>
<p>·    物理分页是从数据库查询指定条数的数据，弥补了一次性全部查出的所有数据的种种缺点，比如需要大量的内存，对数据库查询压力较大等问题。</p>
<h4 id="5-MyBatis-是否支持延迟加载？延迟加载的原理是什么？"><a href="#5-MyBatis-是否支持延迟加载？延迟加载的原理是什么？" class="headerlink" title="5. MyBatis 是否支持延迟加载？延迟加载的原理是什么？"></a><strong>5. MyBatis</strong> <strong>是否支持延迟加载？延迟加载的原理是什么？</strong></h4><p>MyBatis 支持延迟加载，设置 lazyLoadingEnabled=true 即可。</p>
<p>延迟加载的原理的是调用的时候触发加载，而不是在初始化的时候就加载信息。比如调用 a. getB(). getName()，这个时候发现 a. getB() 的值为 null，此时会单独触发事先保存好的关联 B 对象的 SQL，先查询出来 B，然后再调用 a. setB(b)，而这时候再调用 a. getB(). getName() 就有值了，这就是延迟加载的基本原理。</p>
<h4 id="6-说一下-MyBatis-的一级缓存和二级缓存？"><a href="#6-说一下-MyBatis-的一级缓存和二级缓存？" class="headerlink" title="6. 说一下 MyBatis 的一级缓存和二级缓存？"></a><strong>6.</strong> <strong>说一下</strong> <strong>MyBatis</strong> <strong>的一级缓存和二级缓存？</strong></h4><p>·    一级缓存：基于 PerpetualCache 的 HashMap 本地缓存，它的声明周期是和 SQLSession 一致的，有多个 SQLSession 或者分布式的环境中数据库操作，可能会出现脏数据。当 Session flush 或 close 之后，该 Session 中的所有 Cache 就将清空，默认一级缓存是开启的。</p>
<p>·    二级缓存：也是基于 PerpetualCache 的 HashMap 本地缓存，不同在于其存储作用域为 Mapper 级别的，如果多个SQLSession之间需要共享缓存，则需要使用到二级缓存，并且二级缓存可自定义存储源，如 Ehcache。默认不打开二级缓存，要开启二级缓存，使用二级缓存属性类需要实现 Serializable 序列化接口(可用来保存对象的状态)。</p>
<p>开启二级缓存数据查询流程：二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p>
<p>缓存更新机制：当某一个作用域(一级缓存 Session/二级缓存 Mapper)进行了C/U/D 操作后，默认该作用域下所有 select 中的缓存将被 clear。</p>
<h4 id="7-MyBatis-和-hibernate-的区别有哪些？"><a href="#7-MyBatis-和-hibernate-的区别有哪些？" class="headerlink" title="7. MyBatis 和 hibernate 的区别有哪些？"></a><strong>7. MyBatis</strong> <strong>和</strong> <strong>hibernate</strong> <strong>的区别有哪些？</strong></h4><p>·    灵活性：MyBatis 更加灵活，自己可以写 SQL 语句，使用起来比较方便。</p>
<p>·    可移植性：MyBatis 有很多自己写的 SQL，因为每个数据库的 SQL 可以不相同，所以可移植性比较差。</p>
<p>·    学习和使用门槛：MyBatis 入门比较简单，使用门槛也更低。</p>
<p>·    二级缓存：hibernate 拥有更好的二级缓存，它的二级缓存可以自行更换为第三方的二级缓存。</p>
<h4 id="8-MyBatis-有哪些执行器（-Executor-）？"><a href="#8-MyBatis-有哪些执行器（-Executor-）？" class="headerlink" title="8. MyBatis 有哪些执行器（**Executor**）？"></a><strong>8. MyBatis</strong> <strong>有哪些执行器（**</strong>Executor<strong>**）？</strong></h4><p>MyBatis 有三种基本的Executor执行器：</p>
<p>·    SimpleExecutor：每执行一次 update 或 select 就开启一个 Statement 对象，用完立刻关闭 Statement 对象；</p>
<p>·    ReuseExecutor：执行 update 或 select，以 SQL 作为 key 查找 Statement 对象，存在就使用，不存在就创建，用完后不关闭 Statement 对象，而是放置于 Map 内供下一次使用。简言之，就是重复使用 Statement 对象；</p>
<p>·    BatchExecutor：执行 update（没有 select，jdbc 批处理不支持 select），将所有 SQL 都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个 Statement 对象，每个 Statement 对象都是 addBatch()完毕后，等待逐一执行 executeBatch()批处理，与 jdbc 批处理相同。</p>
<h4 id="9-MyBatis-分页插件的实现原理是什么？"><a href="#9-MyBatis-分页插件的实现原理是什么？" class="headerlink" title="9. MyBatis 分页插件的实现原理是什么？"></a><strong>9. MyBatis</strong> <strong>分页插件的实现原理是什么？</strong></h4><p>分页插件的基本原理是使用 MyBatis 提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的 SQL，然后重写 SQL，根据 dialect 方言，添加对应的物理分页语句和物理分页参数。</p>
<h4 id="10-MyBatis-如何编写一个自定义插件？"><a href="#10-MyBatis-如何编写一个自定义插件？" class="headerlink" title="10. MyBatis 如何编写一个自定义插件？"></a><strong>10. MyBatis</strong> <strong>如何编写一个自定义插件？</strong></h4><p>自定义插件实现原理</p>
<p>MyBatis 自定义插件针对 MyBatis 四大对象（Executor、StatementHandler、ParameterHandler、ResultSetHandler）进行拦截：</p>
<p>·    Executor：拦截内部执行器，它负责调用 StatementHandler 操作数据库，并把结果集通过 ResultSetHandler 进行自动映射，另外它还处理了二级缓存的操作；</p>
<p>·    StatementHandler：拦截 SQL 语法构建的处理，它是 MyBatis 直接和数据库执行 SQL 脚本的对象，另外它也实现了 MyBatis 的一级缓存；</p>
<p>·    ParameterHandler：拦截参数的处理；</p>
<p>·    ResultSetHandler：拦截结果集的处理。</p>
<p>自定义插件实现关键</p>
<p>MyBatis 插件要实现 Interceptor 接口，接口包含的方法，如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interceptor</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable</span>;    </span><br><span class="line"></span><br><span class="line">  <span class="function">Object <span class="title">plugin</span><span class="params">(Object target)</span></span>;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>·    setProperties 方法是在 MyBatis 进行配置插件的时候可以配置自定义相关属性，即：接口实现对象的参数配置；</p>
<p>·    plugin 方法是插件用于封装目标对象的，通过该方法我们可以返回目标对象本身，也可以返回一个它的代理，可以决定是否要进行拦截进而决定要返回一个什么样的目标对象，官方提供了示例：return Plugin. wrap(target, this)；</p>
<p>·    intercept 方法就是要进行拦截的时候要执行的方法。</p>
<p>自定义插件实现示例</p>
<p>官方插件实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;<span class="meta">@Signature</span>(type = Executor. <span class="class"><span class="keyword">class</span>, <span class="title">method</span> </span>= <span class="string">"query"</span>,</span><br><span class="line"></span><br><span class="line">​    args = &#123;MappedStatement. <span class="class"><span class="keyword">class</span>, <span class="title">Object</span>. <span class="title">class</span>, <span class="title">RowBounds</span>. <span class="title">class</span>, <span class="title">ResultHandler</span>. <span class="title">class</span>&#125;)&#125;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">TestInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line"></span><br><span class="line">   Object target = invocation. getTarget(); <span class="comment">//被代理对象</span></span><br><span class="line"></span><br><span class="line">   Method method = invocation. getMethod(); <span class="comment">//代理方法</span></span><br><span class="line"></span><br><span class="line">   Object[] args = invocation. getArgs(); <span class="comment">//方法参数</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// do something . . . . . . 方法拦截前执行代码块</span></span><br><span class="line"></span><br><span class="line">   Object result = invocation. proceed();</span><br><span class="line"></span><br><span class="line">   <span class="comment">// do something . . . . . . . 方法拦截后执行代码块</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> Plugin. wrap(target, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>java Hibernate 知识检验</title>
    <url>/2020/07/19/java-Hibernate-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-为什么要使用-hibernate？"><a href="#1-为什么要使用-hibernate？" class="headerlink" title="1. 为什么要使用 hibernate？"></a><strong>1.</strong> <strong>为什么要使用</strong> <strong>hibernate</strong>？</h4><p>·    hibernate 是对 jdbc 的封装，大大简化了数据访问层的繁琐的重复性代码。</p>
<p>·    hibernate 是一个优秀的 ORM 实现，很多程度上简化了 DAO 层的编码功能。</p>
<p>·    可以很方便的进行数据库的移植工作。</p>
<p>·    提供了缓存机制，是程序执行更改的高效。</p>
<h4 id="2-什么是-ORM-框架？"><a href="#2-什么是-ORM-框架？" class="headerlink" title="2. 什么是 ORM 框架？"></a><strong>2.</strong> <strong>什么是</strong> <strong>ORM</strong> <strong>框架？</strong></h4><p>ORM（Object Relation Mapping）对象关系映射，是把数据库中的关系数据映射成为程序中的对象。</p>
<p>使用 ORM 的优点：提高了开发效率降低了开发成本、开发更简单更对象化、可移植更强。</p>
<h4 id="3-hibernate-中如何在控制台查看打印的-SQL-语句？"><a href="#3-hibernate-中如何在控制台查看打印的-SQL-语句？" class="headerlink" title="3. hibernate 中如何在控制台查看打印的 SQL 语句？"></a><strong>3. hibernate</strong> <strong>中如何在控制台查看打印的</strong> <strong>SQL</strong> <strong>语句？</strong></h4><p>在 Config 里面把 hibernate. show_SQL 设置为 true 就可以。但不建议开启，开启之后会降低程序的运行效率。</p>
<h4 id="4-hibernate-有几种查询方式？"><a href="#4-hibernate-有几种查询方式？" class="headerlink" title="4. hibernate 有几种查询方式？"></a><strong>4. hibernate</strong> <strong>有几种查询方式？</strong></h4><p>三种：hql、原生 SQL、条件查询 Criteria。</p>
<h4 id="5-hibernate-实体类可以被定义为-final-吗？"><a href="#5-hibernate-实体类可以被定义为-final-吗？" class="headerlink" title="5. hibernate 实体类可以被定义为 final 吗？"></a><strong>5. hibernate</strong> <strong>实体类可以被定义为</strong> <strong>final</strong> <strong>吗？</strong></h4><p>实体类可以定义为 final 类，但这样的话就不能使用 hibernate 代理模式下的延迟关联提供性能了，所以不建议定义实体类为 final。</p>
<h4 id="6-在-hibernate-中使用-Integer-和-int-做映射有什么区别？"><a href="#6-在-hibernate-中使用-Integer-和-int-做映射有什么区别？" class="headerlink" title="6. 在 hibernate 中使用 Integer 和 int 做映射有什么区别？"></a><strong>6.</strong> <strong>在</strong> <strong>hibernate</strong> <strong>中使用</strong> <strong>Integer</strong> <strong>和</strong> <strong>int</strong> <strong>做映射有什么区别？</strong></h4><p>Integer 类型为对象，它的值允许为 null，而 int 属于基础数据类型，值不能为 null。</p>
<h4 id="7-hibernate-是如何工作的？"><a href="#7-hibernate-是如何工作的？" class="headerlink" title="7. hibernate 是如何工作的？"></a><strong>7. hibernate</strong> <strong>是如何工作的？</strong></h4><p>·    读取并解析配置文件。</p>
<p>·    读取并解析映射文件，创建 SessionFactory。</p>
<p>·    打开 Session。</p>
<p>·    创建事务。</p>
<p>·    进行持久化操作。</p>
<p>·    提交事务。</p>
<p>·    关闭 Session。</p>
<p>·    关闭 SessionFactory。</p>
<h4 id="8-get-和-load-的区别？"><a href="#8-get-和-load-的区别？" class="headerlink" title="8. get()**和** load()**的区别？"></a><strong>8. get()**</strong>和** <strong>load()**</strong>的区别？</h4><p>·    数据查询时，没有 OID 指定的对象，get() 返回 null；load() 返回一个代理对象。</p>
<p>·    load()支持延迟加载；get() 不支持延迟加载。</p>
<h4 id="9-说一下-hibernate-的缓存机制？"><a href="#9-说一下-hibernate-的缓存机制？" class="headerlink" title="9. 说一下 hibernate 的缓存机制？"></a><strong>9.</strong> <strong>说一下</strong> <strong>hibernate</strong> <strong>的缓存机制？</strong></h4><p>hibernate 常用的缓存有一级缓存和二级缓存：</p>
<p>一级缓存：也叫 Session 缓存，只在 Session 作用范围内有效，不需要用户干涉，由 hibernate 自身维护，可以通过：evict(object)清除 object 的缓存；clear()清除一级缓存中的所有缓存；flush()刷出缓存；</p>
<p>二级缓存：应用级别的缓存，在所有 Session 中都有效，支持配置第三方的缓存，如：EhCache。</p>
<h4 id="10-hibernate-对象有哪些状态？"><a href="#10-hibernate-对象有哪些状态？" class="headerlink" title="10. hibernate 对象有哪些状态？"></a><strong>10. hibernate</strong> <strong>对象有哪些状态？</strong></h4><p>·    临时/瞬时状态：直接 new 出来的对象，该对象还没被持久化（没保存在数据库中），不受 Session 管理。</p>
<p>·    持久化状态：当调用 Session 的 save/saveOrupdate/get/load/list 等方法的时候，对象就是持久化状态。</p>
<p>·    游离状态：Session 关闭之后对象就是游离状态。</p>
<h4 id="11-在-hibernate-中-getCurrentSession-和-openSession-的区别是什么？"><a href="#11-在-hibernate-中-getCurrentSession-和-openSession-的区别是什么？" class="headerlink" title="11. 在 hibernate 中 getCurrentSession 和 openSession 的区别是什么？"></a><strong>11.</strong> <strong>在</strong> <strong>hibernate</strong> <strong>中</strong> <strong>getCurrentSession</strong> <strong>和</strong> <strong>openSession</strong> <strong>的区别是什么？</strong></h4><p>·    getCurrentSession 会绑定当前线程，而 openSession 则不会。</p>
<p>·    getCurrentSession 事务是 Spring 控制的，并且不需要手动关闭，而 openSession 需要我们自己手动开启和提交事务。</p>
<h4 id="12-hibernate-实体类必须要有无参构造函数吗？为什么？"><a href="#12-hibernate-实体类必须要有无参构造函数吗？为什么？" class="headerlink" title="12. hibernate 实体类必须要有无参构造函数吗？为什么？"></a><strong>12. hibernate</strong> <strong>实体类必须要有无参构造函数吗？为什么？</strong></h4><p>hibernate 中每个实体类必须提供一个无参构造函数，因为框架要使用，通过调用来创建实体类的实例，如果没有无参的构造函数就会抛出异常。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>Hibernate</tag>
      </tags>
  </entry>
  <entry>
    <title>java[springBoot/springCloud]知识检验</title>
    <url>/2020/07/19/java-springBoot-springCloud-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-什么是-spring-boot？"><a href="#1-什么是-spring-boot？" class="headerlink" title="1. 什么是 spring boot？"></a>1. 什么是 spring boot？</h4><p>spring boot 是为 spring 服务的，是用来简化新 spring 应用的初始搭建以及开发过程的。</p>
<h4 id="2-为什么要用-spring-boot？"><a href="#2-为什么要用-spring-boot？" class="headerlink" title="2. 为什么要用 spring boot？"></a>2. 为什么要用 spring boot？</h4><p>•    配置简单<br>•    独立运行<br>•    自动装配<br>•    无代码生成和 xml 配置<br>•    提供应用监控<br>•    易上手<br>•    提升开发效率</p>
<h4 id="3-spring-boot-配置文件有哪几种类型？它们有什么区别？"><a href="#3-spring-boot-配置文件有哪几种类型？它们有什么区别？" class="headerlink" title="3. spring boot 配置文件有哪几种类型？它们有什么区别？"></a>3. spring boot 配置文件有哪几种类型？它们有什么区别？</h4><p>配置文件有 . properties 格式和 . yml 格式，它们主要的区别是书法风格不同。<br>. properties 配置如下：<br>spring. RabbitMQ. port=5672<br>. yml 配置如下：<br>spring:</p>
<pre><code>RabbitMQ:
    port: 5672</code></pre><p>​    . yml 格式不支持 @PropertySource 注解导入。</p>
<h4 id="4-spring-boot-有哪些方式可以实现热部署？"><a href="#4-spring-boot-有哪些方式可以实现热部署？" class="headerlink" title="4. spring boot 有哪些方式可以实现热部署？"></a>4. spring boot 有哪些方式可以实现热部署？</h4><p>•    使用 devtools 启动热部署，添加 devtools 库，在配置文件中把 spring. devtools. restart. enabled 设置为 true；</p>
<p>•    导入springloaded依赖</p>
<p>•    使用 Intellij Idea 编辑器，勾上自动编译或手动重新编译。</p>
<h4 id="5-jpa-和-hibernate-有什么区别？"><a href="#5-jpa-和-hibernate-有什么区别？" class="headerlink" title="5. jpa 和 hibernate 有什么区别？"></a>5. jpa 和 hibernate 有什么区别？</h4><p>jpa 全称 Java Persistence API，是 Java 持久化接口规范，hibernate 属于 jpa 的具体实现。</p>
<h4 id="6-什么是-spring-cloud？"><a href="#6-什么是-spring-cloud？" class="headerlink" title="6. 什么是 spring cloud？"></a>6. 什么是 spring cloud？</h4><p>spring cloud 是一系列框架的有序集合。它利用 spring boot 的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用 spring boot 的开发风格做到一键启动和部署。</p>
<h4 id="7-spring-cloud-断路器的作用是什么？"><a href="#7-spring-cloud-断路器的作用是什么？" class="headerlink" title="7. spring cloud 断路器的作用是什么？"></a>7. spring cloud 断路器的作用是什么？</h4><p>在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。</p>
<h4 id="8-spring-cloud-的核心组件有哪些？"><a href="#8-spring-cloud-的核心组件有哪些？" class="headerlink" title="8. spring cloud 的核心组件有哪些？"></a>8. spring cloud 的核心组件有哪些？</h4><p>•    Eureka：服务注册于发现。<br>•    Feign：基于动态代理机制，根据注解和选择的机器，拼接请求 url 地址，发起请求。<br>•    Ribbon：实现负载均衡，从一个服务的多台机器中选择一台。<br>•    Hystrix：提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题。<br>•    Zuul：网关管理，由 Zuul 网关转发请求给对应的服务。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>springBoot</tag>
        <tag>springCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>java[spring/springMVC]知识检验</title>
    <url>/2020/07/19/java-spring-springMVC-%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-为什么要使用-spring？"><a href="#1-为什么要使用-spring？" class="headerlink" title="1. 为什么要使用 spring？"></a><strong>1.</strong> <strong>为什么要使用</strong> <strong>spring</strong>？</h4><p>·    spring 提供 ioc 技术，容器会帮你管理依赖的对象，从而不需要自己创建和管理依赖对象了，更轻松的实现了程序的解耦。</p>
<p>·    spring 提供了事务支持，使得事务操作变的更加方便。</p>
<p>·    spring 提供了面向切片编程，这样可以更方便的处理某一类的问题。</p>
<p>·    更方便的框架集成，spring 可以很方便的集成其他框架，比如 MyBatis、hibernate 等。</p>
<h4 id="2-解释一下什么是-aop？"><a href="#2-解释一下什么是-aop？" class="headerlink" title="2. 解释一下什么是 aop？"></a><strong>2.</strong> <strong>解释一下什么是</strong> <em>aop</em>？</h4><p>aop 是面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。</p>
<p>简单来说就是统一处理某一“切面”（类）的问题的编程思想，比如统一处理日志、异常等。</p>
<h4 id="3-解释一下什么是-ioc？"><a href="#3-解释一下什么是-ioc？" class="headerlink" title="3. 解释一下什么是 ioc？"></a><strong>3.</strong> <strong>解释一下什么是</strong> <strong>ioc</strong>？</h4><p>ioc：Inversionof Control（中文：控制反转）是 spring 的核心，对于 spring 框架来说，就是由 spring 来负责控制对象的生命周期和对象间的关系。</p>
<p>简单来说，控制指的是当前对象对内部成员的控制权；控制反转指的是，这种控制权不由当前对象管理了，由其他（类,第三方容器）来管理。</p>
<h4 id="4-spring-有哪些主要模块？"><a href="#4-spring-有哪些主要模块？" class="headerlink" title="4. spring 有哪些主要模块？"></a><strong>4. spring</strong> <strong>有哪些主要模块？</strong></h4><p>·    spring core：框架的最基础部分，提供 ioc 和依赖注入特性。</p>
<p>·    spring context：构建于 core 封装包基础上的 context 封装包，提供了一种框架式的对象访问方法。</p>
<p>·    spring dao：Data Access Object 提供了JDBC的抽象层。</p>
<p>·    spring aop：提供了面向切面的编程实现，让你可以自定义拦截器、切点等。</p>
<p>·    spring Web：提供了针对 Web 开发的集成特性，例如文件上传，利用 servlet listeners 进行 ioc 容器初始化和针对 Web 的 ApplicationContext。</p>
<p>·    spring Web mvc：spring 中的 mvc 封装包提供了 Web 应用的 Model-View-Controller（MVC）的实现。</p>
<h4 id="5-spring-常用的注入方式有哪些？"><a href="#5-spring-常用的注入方式有哪些？" class="headerlink" title="5. spring 常用的注入方式有哪些？"></a><strong>5. spring</strong> <strong>常用的注入方式有哪些？</strong></h4><p>·    setter 属性注入</p>
<p>·    构造方法注入</p>
<p>·    注解方式注入</p>
<h4 id="6-spring-中的-bean-是线程安全的吗？"><a href="#6-spring-中的-bean-是线程安全的吗？" class="headerlink" title="6. spring 中的 bean 是线程安全的吗？"></a><strong>6. spring</strong> <strong>中的</strong> <strong>bean</strong> <strong>是线程安全的吗？</strong></h4><p>spring 中的 bean 默认是单例模式，spring 框架并没有对单例 bean 进行多线程的封装处理。</p>
<p>实际上大部分时候 spring bean 无状态的（比如 dao 类），所有某种程度上来说 bean 也是安全的，但如果 bean 有状态的话（比如 view model 对象），那就要开发者自己去保证线程安全了，最简单的就是改变 bean 的作用域，把“singleton”变更为“prototype”，这样请求 bean 相当于 new Bean()了，所以就可以保证线程安全了。</p>
<p>·    有状态就是有数据存储功能。</p>
<p>·    无状态就是不会保存数据。</p>
<h4 id="7-spring-支持几种-bean-的作用域？"><a href="#7-spring-支持几种-bean-的作用域？" class="headerlink" title="7. spring 支持几种 bean 的作用域？"></a><strong>7. spring</strong> <strong>支持几种</strong> <strong>bean</strong> <strong>的作用域？</strong></h4><p>spring 支持 5 种作用域，如下：</p>
<p>·    singleton：spring ioc 容器中只存在一个 bean 实例，bean 以单例模式存在，是系统默认值；</p>
<p>·    prototype：每次从容器调用 bean 时都会创建一个新的示例，既每次 getBean()相当于执行 new Bean()操作；</p>
<p>·    Web 环境下的作用域：</p>
<p>·    request：每次 http 请求都会创建一个 bean；</p>
<p>·    session：同一个 http session 共享一个 bean 实例；</p>
<p>·    global-session：用于 portlet 容器，因为每个 portlet 有单独的 session，globalsession 提供一个全局性的 http session。</p>
<p>注意： 使用 prototype 作用域需要慎重的思考，因为频繁创建和销毁 bean 会带来很大的性能开销。</p>
<h4 id="8-spring-自动装配-bean-有哪些方式？"><a href="#8-spring-自动装配-bean-有哪些方式？" class="headerlink" title="8. spring 自动装配 bean 有哪些方式？"></a><strong>8. spring</strong> <strong>自动装配</strong> <strong>bean</strong> <strong>有哪些方式？</strong></h4><p>·    no：默认值，表示没有自动装配，应使用显式 bean 引用进行装配。</p>
<p>·    byName：它根据 bean 的名称注入对象依赖项。</p>
<p>·    byType：它根据类型注入对象依赖项。</p>
<p>·    构造函数：通过构造函数来注入依赖项，需要设置大量的参数。</p>
<p>·    autodetect：容器首先通过构造函数使用 autowire 装配，如果不能，则通过 byType 自动装配。</p>
<h4 id="9-spring-事务实现方式有哪些？"><a href="#9-spring-事务实现方式有哪些？" class="headerlink" title="9. spring 事务实现方式有哪些？"></a><strong>9. spring</strong> <strong>事务实现方式有哪些？</strong></h4><p>·    声明式事务：声明式事务也有两种实现方式，基于 xml 配置文件的方式和注解方式（在类上添加 @Transaction 注解）。</p>
<p>·    编码方式：提供编码的形式管理和维护事务。</p>
<h4 id="10-说一下-spring-的事务隔离？"><a href="#10-说一下-spring-的事务隔离？" class="headerlink" title="10.说一下 spring 的事务隔离？"></a>10.<strong>说一下</strong> <strong>spring</strong> <strong>的事务隔离？</strong></h4><p>spring 有五大隔离级别，默认值为 ISOLATION_DEFAULT（使用数据库的设置），其他四个隔离级别和数据库的隔离级别一致：</p>
<p>ISOLATION_DEFAULT：用底层数据库的设置隔离级别，数据库设置的是什么我就用什么；</p>
<p>ISOLATION<em>READ</em>UNCOMMITTED：未提交读，最低隔离级别、事务未提交前，就可被其他事务读取（会出现幻读、脏读、不可重复读）；</p>
<p>ISOLATION<em>READ</em>COMMITTED：提交读，一个事务提交后才能被其他事务读取到（会造成幻读、不可重复读），SQL server 的默认级别；</p>
<p>ISOLATION<em>REPEATABLE</em>READ：可重复读，保证多次读取同一个数据时，其值都和事务开始时候的内容是一致，禁止读取到别的事务未提交的数据（会造成幻读），MySQL 的默认级别；</p>
<p>ISOLATION_SERIALIZABLE：序列化，代价最高最可靠的隔离级别，该隔离级别能防止脏读、不可重复读、幻读。</p>
<p>脏读 ：表示一个事务能够读取另一个事务中还未提交的数据。比如，某个事务尝试插入记录 A，此时该事务还未提交，然后另一个事务尝试读取到了记录 A。</p>
<p>不可重复读 ：是指在一个事务内，多次读同一数据。</p>
<p>幻读 ：指同一个事务内多次查询返回的结果集不一样。比如同一个事务 A 第一次查询时候有 n 条记录，但是第二次同等条件下查询却有 n+1 条记录，这就好像产生了幻觉。发生幻读的原因也是另外一个事务新增或者删除或者修改了第一个事务结果集里面的数据，同一个记录的数据内容被修改了，所有数据行的记录就变多或者变少了。</p>
<h4 id="11-说一下-spring-mvc-运行流程？"><a href="#11-说一下-spring-mvc-运行流程？" class="headerlink" title="11. 说一下 spring mvc 运行流程？"></a><strong>11.</strong> <strong>说一下</strong> <strong>spring mvc</strong> <strong>运行流程？</strong></h4><p>·    spring mvc 先将请求发送给 DispatcherServlet。</p>
<p>·    DispatcherServlet 查询一个或多个 HandlerMapping，找到处理请求的 Controller。</p>
<p>·    DispatcherServlet 再把请求提交到对应的 Controller。</p>
<p>·    Controller 进行业务逻辑处理后，会返回一个ModelAndView。</p>
<p>·    Dispathcher 查询一个或多个 ViewResolver 视图解析器，找到 ModelAndView 对象指定的视图对象。</p>
<p>·    视图对象负责渲染返回给客户端。</p>
<h4 id="12-spring-mvc-有哪些组件？"><a href="#12-spring-mvc-有哪些组件？" class="headerlink" title="12. spring mvc 有哪些组件？"></a><strong>12. spring mvc</strong> <strong>有哪些组件？</strong></h4><p>·    前置控制器 DispatcherServlet。</p>
<p>·    映射控制器 HandlerMapping。</p>
<p>·    处理器 Controller。</p>
<p>·    模型和视图 ModelAndView。</p>
<p>·    视图解析器 ViewResolver。</p>
<h4 id="13-RequestMapping-的作用是什么？"><a href="#13-RequestMapping-的作用是什么？" class="headerlink" title="13. @RequestMapping 的作用是什么？"></a><strong>13. @RequestMapping</strong> <strong>的作用是什么？</strong></h4><p>将 http 请求映射到相应的类/方法上。</p>
<h5 id="14-Autowired-的作用是什么？"><a href="#14-Autowired-的作用是什么？" class="headerlink" title="14. @Autowired 的作用是什么？"></a><strong>14. @Autowired</strong> <strong>的作用是什么？</strong></h5><p>@Autowired 它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作，通过@Autowired 的使用来消除 set/get 方法。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>spring</tag>
        <tag>springmMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>java网络知识检验</title>
    <url>/2020/07/19/java%E7%BD%91%E7%BB%9C%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-http-响应码-301-和-302-代表的是什么？有什么区别？"><a href="#1-http-响应码-301-和-302-代表的是什么？有什么区别？" class="headerlink" title="1. http 响应码 301 和 302 代表的是什么？有什么区别？"></a><strong>1. http</strong> <strong>响应码</strong> <strong>301</strong> <strong>和</strong> <strong>302</strong> <strong>代表的是什么？有什么区别？</strong></h4><p>301：永久重定向。</p>
<p>302：暂时重定向。</p>
<p>它们的区别是，301 对搜索引擎优化（SEO）更加有利；302 有被提示为网络拦截的风险。</p>
<h4 id="2-forward-和-redirect-的区别？"><a href="#2-forward-和-redirect-的区别？" class="headerlink" title="2. forward 和 redirect 的区别？"></a><strong>2. forward</strong> <strong>和</strong> <strong>redirect</strong> <strong>的区别？</strong></h4><p>forward 是转发 和 redirect 是重定向：</p>
<p>·    地址栏 url 显示：foward url 不会发生改变，redirect url 会发生改变；</p>
<p>·    数据共享：forward 可以共享 request 里的数据，redirect 不能共享；</p>
<p>·    效率：forward 比 redirect 效率高。</p>
<h4 id="3-简述-tcp-和-udp的区别？"><a href="#3-简述-tcp-和-udp的区别？" class="headerlink" title="3. 简述 tcp 和 udp的区别？"></a><strong>3.</strong> <strong>简述</strong> <strong>tcp</strong> <strong>和</strong> <strong>udp</strong>的区别？</h4><p>tcp 和 udp 是 OSI 模型中的运输层中的协议。tcp 提供可靠的通信传输，而 udp 则常被用于让广播和细节控制交给应用的通信传输。</p>
<p>两者的区别大致如下：</p>
<p>·    tcp 面向连接，udp 面向非连接即发送数据前不需要建立链接；</p>
<p>·    tcp 提供可靠的服务（数据传输），udp 无法保证；</p>
<p>·    tcp 面向字节流，udp 面向报文；</p>
<p>·    tcp 数据传输慢，udp 数据传输快；</p>
<h4 id="4-tcp-为什么要三次握手，两次不行吗？为什么？"><a href="#4-tcp-为什么要三次握手，两次不行吗？为什么？" class="headerlink" title="4. tcp 为什么要三次握手，两次不行吗？为什么？"></a><strong>4. tcp</strong> <strong>为什么要三次握手，两次不行吗？为什么？</strong></h4><p>如果采用两次握手，那么只要服务器发出确认数据包就会建立连接，但由于客户端此时并未响应服务器端的请求，那此时服务器端就会一直在等待客户端，这样服务器端就白白浪费了一定的资源。若采用三次握手，服务器端没有收到来自客户端的再此确认，则就会知道客户端并没有要求建立请求，就不会浪费服务器的资源。</p>
<h4 id="5-说一下-tcp-粘包是怎么产生的？"><a href="#5-说一下-tcp-粘包是怎么产生的？" class="headerlink" title="5. 说一下 tcp 粘包是怎么产生的？"></a><strong>5.</strong> <strong>说一下</strong> <strong>tcp</strong> <strong>粘包是怎么产生的？</strong></h4><p>tcp 粘包可能发生在发送端或者接收端，分别来看两端各种产生粘包的原因：</p>
<p>·    发送端粘包：发送端需要等缓冲区满才发送出去，造成粘包；</p>
<p>·    接收方粘包：接收方不及时接收缓冲区的包，造成多个包接收。</p>
<h4 id="6-OSI-的七层模型都有哪些？"><a href="#6-OSI-的七层模型都有哪些？" class="headerlink" title="6. OSI 的七层模型都有哪些？"></a><strong>6. OSI</strong> <strong>的七层模型都有哪些？</strong></h4><p>·    物理层：利用传输介质为数据链路层提供物理连接，实现比特流的透明传输。</p>
<p>·    数据链路层：负责建立和管理节点间的链路。</p>
<p>·    网络层：通过路由选择算法，为报文或分组通过通信子网选择最适当的路径。</p>
<p>·    传输层：向用户提供可靠的端到端的差错和流量控制，保证报文的正确传输。</p>
<p>·    会话层：向两个实体的表示层提供建立和使用连接的方法。</p>
<p>·    表示层：处理用户信息的表示问题，如编码、数据格式转换和加密解密等。</p>
<p>·    应用层：直接向用户提供服务，完成用户希望在网络上完成的各种工作。</p>
<h4 id="7-get-和-post-请求有哪些区别？"><a href="#7-get-和-post-请求有哪些区别？" class="headerlink" title="7. get 和 post 请求有哪些区别？"></a><strong>7. get</strong> <strong>和</strong> <strong>post</strong> <strong>请求有哪些区别？</strong></h4><p>·    get 请求会被浏览器主动缓存，而 post 不会。</p>
<p>·    get 传递参数有大小限制，而 post 没有。</p>
<p>·    post 参数传输更安全，get 的参数会明文限制在 url 上，post 不会。</p>
<h4 id="8-如何实现跨域？"><a href="#8-如何实现跨域？" class="headerlink" title="8. 如何实现跨域？"></a><strong>8.</strong> <strong>如何实现跨域？</strong></h4><p>实现跨域有以下几种方案：</p>
<p>·    服务器端运行跨域 设置 CORS 等于 *；</p>
<p>·    在单个接口使用注解 @CrossOrigin 运行跨域；</p>
<p>·    使用 jsonp 跨域；</p>
<h4 id="9-说一下-JSONP-实现原理？"><a href="#9-说一下-JSONP-实现原理？" class="headerlink" title="9. 说一下 JSONP 实现原理？"></a><strong>9.</strong> <strong>说一下</strong> <strong>JSONP</strong> <strong>实现原理？</strong></h4><p>jsonp：JSON with Padding，它是利用script标签的 src 连接可以访问不同源的特性，加载远程返回的“JS 函数”来执行的。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试</tag>
        <tag>网络</tag>
      </tags>
  </entry>
  <entry>
    <title>java多线程知识检验</title>
    <url>/2020/07/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-并行和并发有什么区别？"><a href="#1-并行和并发有什么区别？" class="headerlink" title="1. 并行和并发有什么区别？"></a>1. <strong>并行和并发有什么区别？</strong></h4><p>·    并行：多个处理器或多核处理器同时处理多个任务。</p>
<p>·    并发：多个任务在同一个 CPU 核上，按细分的时间片轮流(交替)执行，从逻辑上来看那些任务是同时执行。</p>
<p>如下图：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="/2020/07/19/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/clip_image001.png"  alt="并发和并行"></p>
<p>并发 = 两个队列和一台咖啡机。</p>
<p>并行 = 两个队列和两台咖啡机。</p>
<h4 id="2-线程和进程的区别？"><a href="#2-线程和进程的区别？" class="headerlink" title="2. 线程和进程的区别？"></a><strong>2.</strong> <strong>线程和进程的区别？</strong></h4><p>一个程序下至少有一个进程，一个进程下至少有一个线程，一个进程下也可以有多个线程来增加程序的执行速度。</p>
<h4 id="3-守护线程是什么？"><a href="#3-守护线程是什么？" class="headerlink" title="3. 守护线程是什么？"></a><strong>3.</strong> <strong>守护线程是什么？</strong></h4><p>守护线程是运行在后台的一种特殊进程。它独立于控制终端并且周期性地执行某种任务或等待处理某些发生的事件。在 Java 中垃圾回收线程就是特殊的守护线程。</p>
<h4 id="4-创建线程有哪几种方式？"><a href="#4-创建线程有哪几种方式？" class="headerlink" title="4. 创建线程有哪几种方式？"></a><strong>4.</strong> <strong>创建线程有哪几种方式？</strong></h4><p>创建线程有三种方式：</p>
<p>·    继承 Thread 重写 run 方法；</p>
<p>·    实现 Runnable 接口；</p>
<p>·    实现 Callable 接口。</p>
<h4 id="5-说一下-runnable-和-callable-有什么区别？"><a href="#5-说一下-runnable-和-callable-有什么区别？" class="headerlink" title="5. 说一下 runnable 和 callable 有什么区别？"></a><strong>5.</strong> <strong>说一下</strong> <strong>runnable</strong> <strong>和</strong> <strong>callable</strong> <strong>有什么区别？</strong></h4><p>runnable 没有返回值，callable 可以拿到有返回值，callable 可以看作是 runnable 的补充。</p>
<h4 id="6-线程有哪些状态？"><a href="#6-线程有哪些状态？" class="headerlink" title="6. 线程有哪些状态？"></a><strong>6.</strong> <strong>线程有哪些状态？</strong></h4><p>线程的状态：</p>
<p>·    NEW 尚未启动</p>
<p>·    RUNNABLE 正在执行中</p>
<p>·    BLOCKED 阻塞的（被同步锁或者IO锁阻塞）</p>
<p>·    WAITING 永久等待状态</p>
<p>·    TIMED_WAITING 等待指定的时间重新被唤醒的状态</p>
<p>·    TERMINATED 执行完成</p>
<h4 id="7-sleep-和-wait-有什么区别？"><a href="#7-sleep-和-wait-有什么区别？" class="headerlink" title="7. sleep() 和 wait() 有什么区别？"></a><strong>7. sleep()</strong> <strong>和</strong> <strong>wait()</strong> <strong>有什么区别？</strong></h4><p>·    类的不同：sleep() 来自 Thread，wait() 来自 Object。</p>
<p>·    释放锁：sleep() 不释放锁；wait() 释放锁。</p>
<p>·    用法不同：sleep() 时间到会自动恢复；wait() 可以使用 notify()/notifyAll()直接唤醒。</p>
<h4 id="8-notify-和-notifyAll-有什么区别？"><a href="#8-notify-和-notifyAll-有什么区别？" class="headerlink" title="8. notify()**和** notifyAll()**有什么区别？**"></a><strong>8. notify()**</strong>和** <strong>notifyAll()**</strong>有什么区别？**</h4><p>notifyAll()会唤醒所有的线程，notify()之后唤醒一个线程。notifyAll() 调用后，会将全部线程由等待池移到锁池，然后参与锁的竞争，竞争成功则继续执行，如果不成功则留在锁池等待锁被释放后再次参与竞争。而 notify()只会唤醒一个线程，具体唤醒哪一个线程由虚拟机控制。</p>
<h4 id="9-线程的-run-和-start-有什么区别？"><a href="#9-线程的-run-和-start-有什么区别？" class="headerlink" title="9. 线程的 run() 和 start() 有什么区别？"></a><strong>9.</strong> <strong>线程的</strong> <strong>run()</strong> <strong>和</strong> <strong>start()</strong> <strong>有什么区别？</strong></h4><p>start() 方法用于启动线程，run() 方法用于执行线程的运行时代码。run() 可以重复调用，而 start() 只能调用一次。</p>
<h4 id="10-创建线程池有哪几种方式？"><a href="#10-创建线程池有哪几种方式？" class="headerlink" title="10. 创建线程池有哪几种方式？"></a><strong>10.</strong> <strong>创建线程池有哪几种方式？</strong></h4><p>线程池创建有七种方式，最核心的是最后一种：</p>
<p>·   newSingleThreadExecutor()：它的特点在于工作线程数目被限制为 1，操作一个无界的工作队列，所以它保证了所有任务的都是被顺序执行，最多会有一个任务处于活动状态，并且不允许使用者改动线程池实例，因此可以避免其改变线程数目；</p>
<p>·   newCachedThreadPool()：它是一种用来处理大量短时间工作任务的线程池，具有几个鲜明特点：它会试图缓存线程并重用，当无缓存线程可用时，就会创建新的工作线程；如果线程闲置的时间超过 60 秒，则被终止并移出缓存；长时间闲置时，这种线程池，不会消耗什么资源。其内部使用 SynchronousQueue 作为工作队列；</p>
<p>·   newFixedThreadPool(int nThreads)：重用指定数目（nThreads）的线程，其背后使用的是无界的工作队列，任何时候最多有 nThreads 个工作线程是活动的。这意味着，如果任务数量超过了活动队列数目，将在工作队列中等待空闲线程出现；如果有工作线程退出，将会有新的工作线程被创建，以补足指定的数目 nThreads；</p>
<p>·   newSingleThreadScheduledExecutor()：创建单线程池，返回 ScheduledExecutorService，可以进行定时或周期性的工作调度；</p>
<p>·   newScheduledThreadPool(int corePoolSize)：和newSingleThreadScheduledExecutor()类似，创建的是个 ScheduledExecutorService，可以进行定时或周期性的工作调度，区别在于单一工作线程还是多个工作线程；</p>
<p>·   newWorkStealingPool(int parallelism)：这是一个经常被人忽略的线程池，Java 8 才加入这个创建方法，其内部会构建ForkJoinPool，利用Work-Stealing算法，并行地处理任务，不保证处理顺序；</p>
<p>·   ThreadPoolExecutor()：是最原始的线程池创建，上面1-3创建方式都是对ThreadPoolExecutor的封装。</p>
<h4 id="11-线程池都有哪些状态？"><a href="#11-线程池都有哪些状态？" class="headerlink" title="11. 线程池都有哪些状态？"></a><strong>11.</strong> <strong>线程池都有哪些状态？</strong></h4><p>·    RUNNING：这是最正常的状态，接受新的任务，处理等待队列中的任务。</p>
<p>·    SHUTDOWN：不接受新的任务提交，但是会继续处理等待队列中的任务。</p>
<p>·    STOP：不接受新的任务提交，不再处理等待队列中的任务，中断正在执行任务的线程。</p>
<p>·    TIDYING：所有的任务都销毁了，workCount 为 0，线程池的状态在转换为 TIDYING 状态时，会执行钩子方法 terminated()。</p>
<p>·    TERMINATED：terminated()方法结束后，线程池的状态就会变成这个。</p>
<h4 id="12-线程池中-submit-和-execute-方法有什么区别？"><a href="#12-线程池中-submit-和-execute-方法有什么区别？" class="headerlink" title="12. 线程池中 submit() 和 execute() 方法有什么区别？"></a><strong>12.</strong> <strong>线程池中</strong> <strong>submit()</strong> <strong>和</strong> <strong>execute()</strong> <strong>方法有什么区别？</strong></h4><p>·    execute()：只能执行 Runnable 类型的任务。</p>
<p>·    submit()：可以执行 Runnable 和 Callable 类型的任务。</p>
<p>Callable 类型的任务可以获取执行的返回值，而 Runnable 执行无返回值。</p>
<h4 id="13-在-Java-程序中怎么保证多线程的运行安全？"><a href="#13-在-Java-程序中怎么保证多线程的运行安全？" class="headerlink" title="13. 在 Java 程序中怎么保证多线程的运行安全？"></a><strong>13.</strong> <strong>在</strong> <strong>Java</strong> <strong>程序中怎么保证多线程的运行安全？</strong></h4><p>·    方法一：使用安全类，比如 Java. util. concurrent 下的类。</p>
<p>·    方法二：使用自动锁 synchronized。</p>
<p>·    方法三：使用手动锁 Lock。</p>
<p>手动锁 Java 示例代码如下：</p>
<p>Lock lock = new ReentrantLock();</p>
<p>lock. lock();</p>
<p>try {</p>
<p>  System. out. println(“获得锁”);</p>
<p>} catch (Exception e) {</p>
<p>  // TODO: handle exception</p>
<p>} finally {</p>
<p>  System. out. println(“释放锁”);</p>
<p>  lock. unlock();</p>
<p>}</p>
<h4 id="14-多线程中-synchronized-锁升级的原理是什么？"><a href="#14-多线程中-synchronized-锁升级的原理是什么？" class="headerlink" title="14. 多线程中 synchronized 锁升级的原理是什么？"></a><strong>14.</strong> <strong>多线程中</strong> <strong>synchronized</strong> <strong>锁升级的原理是什么？</strong></h4><p>synchronized 锁升级原理：在锁对象的对象头里面有一个 threadid 字段，在第一次访问的时候 threadid 为空，jvm 让其持有偏向锁，并将 threadid 设置为其线程 id，再次进入的时候会先判断 threadid 是否与其线程 id 一致，如果一致则可以直接使用此对象，如果不一致，则升级偏向锁为轻量级锁，通过自旋循环一定次数来获取锁，执行一定次数之后，如果还没有正常获取到要使用的对象，此时就会把锁从轻量级升级为重量级锁，此过程就构成了 synchronized 锁的升级。</p>
<p>锁的升级的目的：锁升级是为了减低了锁带来的性能消耗。在 Java 6 之后优化 synchronized 的实现方式，使用了偏向锁升级为轻量级锁再升级到重量级锁的方式，从而减低了锁带来的性能消耗。</p>
<h4 id="15-什么是死锁？"><a href="#15-什么是死锁？" class="headerlink" title="15. 什么是死锁？"></a><strong>15.</strong> <strong>什么是死锁？</strong></h4><p>当线程 A 持有独占锁a，并尝试去获取独占锁 b 的同时，线程 B 持有独占锁 b，并尝试获取独占锁 a 的情况下，就会发生 AB 两个线程由于互相持有对方需要的锁，而发生的阻塞现象，我们称为死锁。</p>
<h4 id="16-怎么防止死锁？"><a href="#16-怎么防止死锁？" class="headerlink" title="16. 怎么防止死锁？"></a><strong>16.</strong> <strong>怎么防止死锁？</strong></h4><p>·    尽量使用 tryLock(long timeout, TimeUnit unit)的方法(ReentrantLock、ReentrantReadWriteLock)，设置超时时间，超时可以退出防止死锁。</p>
<p>·    尽量使用 Java. util. concurrent 并发类代替自己手写锁。</p>
<p>·    尽量降低锁的使用粒度，尽量不要几个功能用同一把锁。</p>
<p>·    尽量减少同步的代码块。</p>
<h4 id="17-ThreadLocal-是什么？有哪些使用场景？"><a href="#17-ThreadLocal-是什么？有哪些使用场景？" class="headerlink" title="17. ThreadLocal 是什么？有哪些使用场景？"></a><strong>17. ThreadLocal</strong> <strong>是什么？有哪些使用场景？</strong></h4><p>ThreadLocal 为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立地改变自己的副本，而不会影响其它线程所对应的副本。</p>
<p>ThreadLocal 的经典使用场景是数据库连接和 session 管理等。</p>
<h4 id="18-说一下-synchronized-底层实现原理？"><a href="#18-说一下-synchronized-底层实现原理？" class="headerlink" title="18. 说一下 synchronized 底层实现原理？"></a><strong>18.</strong> <strong>说一下</strong> <strong>synchronized</strong> <strong>底层实现原理？</strong></h4><p>synchronized 是由一对 monitorenter/monitorexit 指令实现的，monitor 对象是同步的基本实现单元。在 Java 6 之前，monitor 的实现完全是依靠操作系统内部的互斥锁，因为需要进行用户态到内核态的切换，所以同步操作是一个无差别的重量级操作，性能也很低。但在 Java 6 的时候，Java 虚拟机 对此进行了大刀阔斧地改进，提供了三种不同的 monitor 实现，也就是常说的三种不同的锁：偏向锁（Biased Locking）、轻量级锁和重量级锁，大大改进了其性能。</p>
<h4 id="19-synchronized-和-volatile-的区别是什么？"><a href="#19-synchronized-和-volatile-的区别是什么？" class="headerlink" title="19. synchronized 和 volatile 的区别是什么？"></a><strong>19. synchronized</strong> <strong>和</strong> <strong>volatile</strong> <strong>的区别是什么？</strong></h4><p>·    volatile 是变量修饰符；synchronized 是修饰类、方法、代码段。</p>
<p>·    volatile 仅能实现变量的修改可见性，不能保证原子性；而 synchronized 则可以保证变量的修改可见性和原子性。</p>
<p>·    volatile 不会造成线程的阻塞；synchronized 可能会造成线程的阻塞。</p>
<h4 id="20-synchronized-和-Lock-有什么区别？"><a href="#20-synchronized-和-Lock-有什么区别？" class="headerlink" title="20. synchronized 和 Lock 有什么区别？"></a><strong>20. synchronized</strong> <strong>和</strong> <strong>Lock</strong> <strong>有什么区别？</strong></h4><p>·    synchronized 可以给类、方法、代码块加锁；而 lock 只能给代码块加锁。</p>
<p>·    synchronized 不需要手动获取锁和释放锁，使用简单，发生异常会自动释放锁，不会造成死锁；而 lock 需要自己加锁和释放锁，如果使用不当没有 unLock()去释放锁就会造成死锁。</p>
<p>·    通过 Lock 可以知道有没有成功获取锁，而 synchronized 却无法办到。</p>
<h4 id="21-synchronized-和-ReentrantLock-区别是什么？"><a href="#21-synchronized-和-ReentrantLock-区别是什么？" class="headerlink" title="21. synchronized 和 ReentrantLock 区别是什么？"></a><strong>21. synchronized</strong> <strong>和</strong> <strong>ReentrantLock</strong> <strong>区别是什么？</strong></h4><p>synchronized 早期的实现比较低效，对比 ReentrantLock，大多数场景性能都相差较大，但是在 Java 6 中对 synchronized 进行了非常多的改进。</p>
<p>主要区别如下：</p>
<p>·    ReentrantLock 使用起来比较灵活，但是必须有释放锁的配合动作；</p>
<p>·    ReentrantLock 必须手动获取与释放锁，而 synchronized 不需要手动释放和开启锁；</p>
<p>·    ReentrantLock 只适用于代码块锁，而 synchronized 可用于修饰方法、代码块等。</p>
<p>·    volatile 标记的变量不会被编译器优化；synchronized 标记的变量可以被编译器优化。</p>
<h4 id="22-说一下-atomic-的原理？"><a href="#22-说一下-atomic-的原理？" class="headerlink" title="22. 说一下 atomic 的原理？"></a><strong>22.</strong> <strong>说一下</strong> <strong>atomic</strong> <strong>的原理？</strong></h4><p>atomic 主要利用 CAS (Compare And Wwap) 和 volatile 和 native 方法来保证原子操作，从而避免 synchronized 的高开销，执行效率大为提升。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>锁</tag>
        <tag>面试</tag>
        <tag>多线程</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>java容器知识检验</title>
    <url>/2020/07/16/java%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="18-Java-容器都有哪些？"><a href="#18-Java-容器都有哪些？" class="headerlink" title="18. Java 容器都有哪些？"></a><strong>18. Java</strong> <strong>容器都有哪些？</strong></h4><p>Java 容器分为 Collection 和 Map 两大类，其下又有很多子类，如下所示：</p>
<p>·    Collection</p>
<p>·    List</p>
<p>o  ArrayList</p>
<p>o  LinkedList</p>
<p>o  Vector</p>
<p>o  Stack</p>
<p>·    Set</p>
<p>o  HashSet</p>
<p>o  LinkedHashSet</p>
<p>o  TreeSet</p>
<p>·    Map</p>
<p>·    HashMap</p>
<p>o  LinkedHashMap</p>
<p>·    TreeMap</p>
<p>·    ConcurrentHashMap</p>
<p>·    Hashtable</p>
<h4 id="19-Collection-和-Collections-有什么区别？"><a href="#19-Collection-和-Collections-有什么区别？" class="headerlink" title="19. Collection 和 Collections 有什么区别？"></a><strong>19. Collection</strong> <strong>和</strong> <strong>Collections</strong> <strong>有什么区别？</strong></h4><p>·    Collection 是一个集合接口，它提供了对集合对象进行基本操作的通用接口方法，所有集合都是它的子类，比如 List、Set 等。</p>
<p>·    Collections 是一个包装类，包含了很多静态方法，不能被实例化，就像一个工具类，比如提供的排序方法： Collections. sort(list)。</p>
<h4 id="20-List、Set、-Map-之间的区别是什么？"><a href="#20-List、Set、-Map-之间的区别是什么？" class="headerlink" title="20. List、Set、*Map *之间的区别是什么？"></a><strong>20. List</strong>、<strong><strong>Set</strong></strong>、<strong>*<em>Map *</em>之间的区别是什么？</strong></h4><p>List、Set、Map 的区别主要体现在两个方面：元素是否有序、是否允许元素重复。</p>
<p>三者之间的区别，如下表：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="/2020/07/16/java%E5%AE%B9%E5%99%A8%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/%E5%9B%BE1.png"  alt="区别图"></p>
<h4 id="21-HashMap-和-Hashtable-有什么区别？"><a href="#21-HashMap-和-Hashtable-有什么区别？" class="headerlink" title="21. HashMap 和 Hashtable 有什么区别？"></a><strong>21. HashMap</strong> <strong>和</strong> <strong>Hashtable</strong> <strong>有什么区别？</strong></h4><p>·    存储：HashMap 运行 key 和 value 为 null，而 Hashtable 不允许。</p>
<p>·    线程安全：Hashtable 是线程安全的，而 HashMap 是非线程安全的。</p>
<p>·    推荐使用：在 Hashtable 的类注释可以看到，Hashtable 是保留类不建议使用，推荐在单线程环境下使用 HashMap 替代，如果需要多线程使用则用 ConcurrentHashMap 替代。</p>
<h4 id="22-如何决定使用-HashMap-还是-TreeMap-？"><a href="#22-如何决定使用-HashMap-还是-TreeMap-？" class="headerlink" title="22. 如何决定使用 HashMap 还是 TreeMap**？**"></a><strong>22.</strong> <strong>如何决定使用</strong> <strong>HashMap</strong> <strong>还是</strong> <strong>TreeMap**</strong>？**</h4><p>对于在 Map 中插入、删除、定位一个元素这类操作，HashMap 是最好的选择，因为相对而言 HashMap 的插入会更快，但如果你要对一个 key 集合进行有序的遍历，那 TreeMap 是更好的选择。</p>
<h4 id="23-说一下-HashMap-的实现原理？"><a href="#23-说一下-HashMap-的实现原理？" class="headerlink" title="23. 说一下 HashMap 的实现原理？"></a><strong>23.</strong> <strong>说一下</strong> <strong>HashMap</strong> <strong>的实现原理？</strong></h4><p>HashMap 基于 Hash 算法实现的，我们通过 put(key,value)存储，get(key)来获取。当传入 key 时，HashMap 会根据 key. hashCode() 计算出 hash 值，根据 hash 值将 value 保存在 bucket 里。当计算出的 hash 值相同时，我们称之为 hash 冲突，HashMap 的做法是用链表和红黑树存储相同 hash 值的 value。当 hash 冲突的个数比较少时，使用链表否则使用红黑树。</p>
<h4 id="24-说一下-HashSet-的实现原理？"><a href="#24-说一下-HashSet-的实现原理？" class="headerlink" title="24. 说一下 HashSet 的实现原理？"></a><strong>24.</strong> <strong>说一下</strong> <strong>HashSet</strong> <strong>的实现原理？</strong></h4><p>HashSet 是基于 HashMap 实现的，HashSet 底层使用 HashMap 来保存所有元素，因此 HashSet 的实现比较简单，相关 HashSet 的操作，基本上都是直接调用底层 HashMap 的相关方法来完成，HashSet 不允许重复的值。</p>
<h4 id="25-ArrayList-和-LinkedList-的区别是什么？"><a href="#25-ArrayList-和-LinkedList-的区别是什么？" class="headerlink" title="25. ArrayList 和 LinkedList 的区别是什么？"></a><strong>25. ArrayList</strong> <strong>和</strong> <strong>LinkedList</strong> <strong>的区别是什么？</strong></h4><p>·    数据结构实现：ArrayList 是动态数组的数据结构实现，而 LinkedList 是双向链表的数据结构实现。</p>
<p>·    随机访问效率：ArrayList 比 LinkedList 在随机访问的时候效率要高，因为 LinkedList 是线性的数据存储方式，所以需要移动指针从前往后依次查找。</p>
<p>·    增加和删除效率：在非首尾的增加和删除操作，LinkedList 要比 ArrayList 效率要高，因为 ArrayList 增删操作要影响数组内的其他数据的下标。</p>
<p>综合来说，在需要频繁读取集合中的元素时，更推荐使用 ArrayList，而在插入和删除操作较多时，更推荐使用 LinkedList。</p>
<h4 id="26-如何实现数组和-List-之间的转换？"><a href="#26-如何实现数组和-List-之间的转换？" class="headerlink" title="26. 如何实现数组和 List 之间的转换？"></a><strong>26.</strong> <strong>如何实现数组和</strong> <strong>List</strong> <strong>之间的转换？</strong></h4><p>·    数组转 List：使用 Arrays. asList(array) 进行转换。</p>
<p>·    List 转数组：使用 List 自带的 toArray() 方法。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// list to array</span></span><br><span class="line"></span><br><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">list. add(<span class="string">"王磊"</span>);</span><br><span class="line"></span><br><span class="line">list. add(<span class="string">"的博客"</span>);</span><br><span class="line"></span><br><span class="line">list. toArray();</span><br><span class="line"></span><br><span class="line"><span class="comment">// array to list</span></span><br><span class="line"></span><br><span class="line">String[] array = <span class="keyword">new</span> String[]&#123;<span class="string">"王磊"</span>,<span class="string">"的博客"</span>&#125;;</span><br><span class="line"></span><br><span class="line">Arrays. asList(array);</span><br></pre></td></tr></table></figure>

<h4 id="27-ArrayList-和-Vector-的区别是什么？"><a href="#27-ArrayList-和-Vector-的区别是什么？" class="headerlink" title="27. ArrayList 和 Vector 的区别是什么？"></a><strong>27. ArrayList</strong> <strong>和</strong> <strong>Vector</strong> <strong>的区别是什么？</strong></h4><p>·    线程安全：Vector 使用了 Synchronized 来实现线程同步，是线程安全的，而 ArrayList 是非线程安全的。</p>
<p>·    性能：ArrayList 在性能方面要优于 Vector。</p>
<p>·    扩容：ArrayList 和 Vector 都会根据实际的需要动态的调整容量，只不过在 Vector 扩容每次会增加 1 倍，而 ArrayList 只会增加 50%。</p>
<h4 id="28-Array-和-ArrayList-有何区别？"><a href="#28-Array-和-ArrayList-有何区别？" class="headerlink" title="28. Array 和 ArrayList 有何区别？"></a><strong>28. Array</strong> <strong>和</strong> <strong>ArrayList</strong> <strong>有何区别？</strong></h4><p>·    Array 可以存储基本数据类型和对象，ArrayList 只能存储对象。</p>
<p>·    Array 是指定固定大小的，而 ArrayList 大小是自动扩展的。</p>
<p>·    Array 内置方法没有 ArrayList 多，比如 addAll、removeAll、iteration 等方法只有 ArrayList 有。</p>
<h4 id="29-在-Queue-中-poll-和-remove-有什么区别？"><a href="#29-在-Queue-中-poll-和-remove-有什么区别？" class="headerlink" title="29. 在 Queue 中 poll()和 remove()有什么区别？"></a><strong>29.</strong> <strong>在</strong> <strong>Queue</strong> <strong>中</strong> <strong>poll()</strong>和 <strong>remove()有什么区别？</strong></h4><p>·    相同点：都是返回第一个元素，并在队列中删除返回的对象。</p>
<p>·    不同点：如果没有元素 poll()会返回 null，而 remove()会直接抛出 NoSuchElementException 异常。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Queue&lt;String&gt; queue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">queue. offer(<span class="string">"string"</span>); <span class="comment">// add</span></span><br><span class="line"></span><br><span class="line">System. out. println(queue. poll());</span><br><span class="line"></span><br><span class="line">System. out. println(queue. remove());</span><br><span class="line"></span><br><span class="line">System. out. println(queue. size());</span><br></pre></td></tr></table></figure>



<h4 id="30-哪些集合类是线程安全的？"><a href="#30-哪些集合类是线程安全的？" class="headerlink" title="30. 哪些集合类是线程安全的？"></a><strong>30.</strong> <strong>哪些集合类是线程安全的？</strong></h4><p>Vector、Hashtable、Stack 都是线程安全的，而像 HashMap 则是非线程安全的，不过在 JDK 1.5 之后随着 Java. util. concurrent 并发包的出现，它们也有了自己对应的线程安全类，比如 HashMap 对应的线程安全类就是 ConcurrentHashMap。</p>
<h4 id="31-迭代器-Iterator-是什么？"><a href="#31-迭代器-Iterator-是什么？" class="headerlink" title="31. 迭代器 Iterator 是什么？"></a><strong>31.</strong> <strong>迭代器</strong> <strong>Iterator</strong> <strong>是什么？</strong></h4><p>Iterator 接口提供遍历任何 Collection 的接口。我们可以从一个 Collection 中使用迭代器方法来获取迭代器实例。迭代器取代了 Java 集合框架中的 Enumeration，迭代器允许调用者在迭代过程中移除元素。</p>
<h4 id="32-Iterator-怎么使用？有什么特点？"><a href="#32-Iterator-怎么使用？有什么特点？" class="headerlink" title="32. Iterator 怎么使用？有什么特点？"></a><strong>32. Iterator</strong> <strong>怎么使用？有什么特点？</strong></h4><p>Iterator 使用代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Iterator&lt;String&gt; it = list. iterator();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(it. hasNext())&#123;</span><br><span class="line"></span><br><span class="line"> String obj = it. next();</span><br><span class="line"></span><br><span class="line"> System. out. println(obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Iterator 的特点是更加安全，因为它可以确保，在当前遍历的集合元素被更改的时候，就会抛出 ConcurrentModificationException 异常。</p>
<h4 id="33-Iterator-和-ListIterator-有什么区别？"><a href="#33-Iterator-和-ListIterator-有什么区别？" class="headerlink" title="33. Iterator 和 ListIterator 有什么区别？"></a><strong>33. Iterator</strong> <strong>和</strong> <strong>ListIterator</strong> <strong>有什么区别？</strong></h4><p>·    Iterator 可以遍历 Set 和 List 集合，而 ListIterator 只能遍历 List。</p>
<p>·    Iterator 只能单向遍历，而 ListIterator 可以双向遍历（向前/后遍历）。</p>
<p>·    ListIterator 从 Iterator 接口继承，然后添加了一些额外的功能，比如添加一个元素、替换一个元素、获取前面或后面元素的索引位置。</p>
<h4 id="34-怎么确保一个集合不能被修改？"><a href="#34-怎么确保一个集合不能被修改？" class="headerlink" title="34. 怎么确保一个集合不能被修改？"></a><strong>34.</strong> <strong>怎么确保一个集合不能被修改？</strong></h4><p>可以使用 Collections. unmodifiableCollection(Collection c) 方法来创建一个只读集合，这样改变集合的任何操作都会抛出 Java. lang. UnsupportedOperationException 异常。</p>
<p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">list. add(<span class="string">"x"</span>);</span><br><span class="line"></span><br><span class="line">Collection&lt;String&gt; clist = Collections. unmodifiableCollection(list);</span><br><span class="line"></span><br><span class="line">clist. add(<span class="string">"y"</span>); <span class="comment">// 运行时此行报错</span></span><br><span class="line"></span><br><span class="line">System. out. println(list. size());</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>容器</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>java基础知识检验</title>
    <url>/2020/07/16/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/</url>
    <content><![CDATA[<h4 id="1-JDK-和-JRE-有什么区别？"><a href="#1-JDK-和-JRE-有什么区别？" class="headerlink" title="1. JDK 和 JRE 有什么区别？"></a><strong>1. JDK</strong> <strong>和</strong> <strong>JRE</strong> <strong>有什么区别？</strong></h4><p>·    JDK：Java Development Kit 的简称，Java 开发工具包，提供了 Java 的开发环境和运行环境。</p>
<p>·    JRE：Java Runtime Environment 的简称，Java 运行环境，为 Java 的运行提供了所需环境。</p>
<p>具体来说 JDK 其实包含了 JRE，同时还包含了编译 Java 源码的编译器 Javac，还包含了很多 Java 程序调试和分析的工具。简单来说：如果你需要运行 Java 程序，只需安装 JRE 就可以了，如果你需要编写 Java 程序，需要安装 JDK。</p>
<h4 id="2-和-equals-的区别是什么？"><a href="#2-和-equals-的区别是什么？" class="headerlink" title="2. == 和 equals 的区别是什么？"></a><strong>2. ==</strong> <strong>和</strong> <strong>equals</strong> <strong>的区别是什么？</strong></h4><p>== 解读</p>
<p>对于基本类型和引用类型 == 的作用效果是不同的，如下所示：</p>
<p>·    基本类型：比较的是值是否相同；</p>
<p>·    引用类型：比较的是引用是否相同；</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String x = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">String y = <span class="string">"string"</span>;</span><br><span class="line"></span><br><span class="line">String z = <span class="keyword">new</span> String(<span class="string">"string"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(x==y); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(x==z); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">System.out.println(x.equals(z)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>代码解读：因为 x 和 y 指向的是同一个引用，所以 == 也是 true，而 new String()方法则重写开辟了内存空间，所以 == 结果为 false，而 equals 比较的一直是值，所以结果都为 true。</p>
<p>equals 解读</p>
<p>equals 本质上就是 ==，只不过 String 和 Integer 等重写了 equals 方法，把它变成了值比较。看下面的代码就明白了。</p>
<p>首先来看默认情况下 equals 比较一个有相同值的对象，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Cat</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> name;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">Cat c1 = <span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line"></span><br><span class="line">Cat c2 = <span class="keyword">new</span> Cat(<span class="string">"王磊"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(c1.equals(c2)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<p>输出结果出乎我们的意料，竟然是 false？这是怎么回事，看了 equals 源码就知道了，源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来 equals 本质上就是 ==。</p>
<p>那问题来了，两个相同值的 String 对象，为什么返回的是 true？代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">String s2 = <span class="keyword">new</span> String(<span class="string">"老王"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(s1.equals(s2)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>同样的，当我们进入 String 的 equals 方法，找到了答案，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line"></span><br><span class="line">​    String anotherString = (String)anObject;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> n = value.length;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">char</span> v1[] = value;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line"></span><br><span class="line">​          <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">​        i++;</span><br><span class="line"></span><br><span class="line">​      &#125;</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>原来是 String 重写了 Object 的 equals 方法，把引用比较改成了值比较。</p>
<p>总结 ：== 对于基本类型来说是值比较，对于引用类型来说是比较的是引用；而 equals 默认情况下是引用比较，只是很多类重新了 equals 方法，比如 String、Integer 等把它变成了值比较，所以一般情况下 equals 比较的是值是否相等。</p>
<h4 id="3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？"><a href="#3-两个对象的-hashCode-相同，则-equals-也一定为-true，对吗？" class="headerlink" title="3. 两个对象的 hashCode() 相同，则 equals() 也一定为 true，对吗？"></a><strong>3.</strong> <strong>两个对象的</strong> <strong>hashCode()</strong> <strong>相同，则</strong> <strong>equals()</strong> <strong>也一定为</strong> <strong>true</strong>，对吗？</h4><p>不对，两个对象的 hashCode() 相同，equals() 不一定 true。</p>
<p>代码示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"通话"</span>;</span><br><span class="line"></span><br><span class="line">String str2 = <span class="string">"重地"</span>;</span><br><span class="line"></span><br><span class="line">System. out. println(String. format(<span class="string">"str1：%d | str2：%d"</span>, str1. hashCode(),str2. hashCode()));</span><br><span class="line"></span><br><span class="line">System. out. println(str1. equals(str2));</span><br></pre></td></tr></table></figure>

<p>执行的结果：</p>
<p>str1：1179395 | str2：1179395</p>
<p> false</p>
<p>代码解读：很显然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false，因为在散列表中，hashCode() 相等即两个键值对的哈希值相等，然而哈希值相等，并不一定能得出键值对相等。</p>
<h4 id="4-final-在-Java-中有什么作用？"><a href="#4-final-在-Java-中有什么作用？" class="headerlink" title="4. final 在 Java 中有什么作用？"></a><strong>4. final</strong> <strong>在</strong> <strong>Java</strong> <strong>中有什么作用？</strong></h4><p>·    final 修饰的类叫最终类，该类不能被继承。</p>
<p>·    final 修饰的方法不能被重写。</p>
<p>·    final 修饰的变量叫常量，常量必须初始化，初始化之后值就不能被修改。</p>
<h4 id="5-Java-中的-Math-round-1-5-等于多少？"><a href="#5-Java-中的-Math-round-1-5-等于多少？" class="headerlink" title="5. Java 中的 Math. round(-1. 5) 等于多少？"></a><strong>5. Java</strong> <strong>中的</strong> <strong>Math. round(-1. 5)</strong> <strong>等于多少？</strong></h4><p>等于 -1，因为在数轴上取值时，中间值（0.5）向右取整，所以正 0.5 是往上取整，负 0.5 是直接舍弃。</p>
<h4 id="6-String-属于基础的数据类型吗？"><a href="#6-String-属于基础的数据类型吗？" class="headerlink" title="6. String 属于基础的数据类型吗？"></a><strong>6. String</strong> <strong>属于基础的数据类型吗？</strong></h4><p>String 不属于基础类型，基础类型有 8 种：byte、boolean、char、short、int、float、long、double，而 String 属于对象。</p>
<h4 id="7-Java-中操作字符串都有哪些类？它们之间有什么区别？"><a href="#7-Java-中操作字符串都有哪些类？它们之间有什么区别？" class="headerlink" title="7. Java 中操作字符串都有哪些类？它们之间有什么区别？"></a><strong>7. Java</strong> <strong>中操作字符串都有哪些类？它们之间有什么区别？</strong></h4><p>操作字符串的类有：String、StringBuffer、StringBuilder。</p>
<p>String 和 StringBuffer、StringBuilder 的区别在于 String 声明的是不可变的对象，每次操作都会生成新的 String 对象，然后将指针指向新的 String 对象，而 StringBuffer、StringBuilder 可以在原有对象的基础上进行操作，所以在经常改变字符串内容的情况下最好不要使用 String。</p>
<p>StringBuffer 和 StringBuilder 最大的区别在于，StringBuffer 是线程安全的，而 StringBuilder 是非线程安全的，但 StringBuilder 的性能却高于 StringBuffer，所以在单线程环境下推荐使用 StringBuilder，多线程环境下推荐使用 StringBuffer。</p>
<h4 id="8-String-str-”i”-与-String-str-new-String-“i”-一样吗？"><a href="#8-String-str-”i”-与-String-str-new-String-“i”-一样吗？" class="headerlink" title="8. String str=”i”**与** String str=new String(“i”)**一样吗？**"></a><strong>8. String str=”i”**</strong>与** <strong>String str=new String(“i”)**</strong>一样吗？**</h4><p>不一样，因为内存的分配方式不一样。String str=”i”的方式，Java 虚拟机会将其分配到常量池中；而 String str=new String(“i”) 则会被分到堆内存中。</p>
<h4 id="9-如何将字符串反转？"><a href="#9-如何将字符串反转？" class="headerlink" title="9. 如何将字符串反转？"></a><strong>9.</strong> <strong>如何将字符串反转？</strong></h4><p>使用 StringBuilder 或者 stringBuffer 的 reverse() 方法。</p>
<p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// StringBuffer reverse</span></span><br><span class="line"></span><br><span class="line">StringBuffer stringBuffer = <span class="keyword">new</span> StringBuffer();</span><br><span class="line"></span><br><span class="line">stringBuffer. append(<span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line">System. out. println(stringBuffer. reverse()); <span class="comment">// gfedcba</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// StringBuilder reverse</span></span><br><span class="line"></span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">stringBuilder. append(<span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line">System. out. println(stringBuilder. reverse()); <span class="comment">// gfedcba</span></span><br></pre></td></tr></table></figure>

<h4 id="10-String-类的常用方法都有那些？"><a href="#10-String-类的常用方法都有那些？" class="headerlink" title="10. String 类的常用方法都有那些？"></a><strong>10. String</strong> <strong>类的常用方法都有那些？</strong></h4><p>·    indexOf()：返回指定字符的索引。</p>
<p>·    charAt()：返回指定索引处的字符。</p>
<p>·    replace()：字符串替换。</p>
<p>·    trim()：去除字符串两端空白。</p>
<p>·    split()：分割字符串，返回一个分割后的字符串数组。</p>
<p>·    getBytes()：返回字符串的 byte 类型数组。</p>
<p>·    length()：返回字符串长度。</p>
<p>·    toLowerCase()：将字符串转成小写字母。</p>
<p>·    toUpperCase()：将字符串转成大写字符。</p>
<p>·    substring()：截取字符串。</p>
<p>·    equals()：字符串比较。</p>
<h4 id="11-抽象类必须要有抽象方法吗？"><a href="#11-抽象类必须要有抽象方法吗？" class="headerlink" title="11. 抽象类必须要有抽象方法吗？"></a><strong>11.</strong> <strong>抽象类必须要有抽象方法吗？</strong></h4><p>不需要，抽象类不一定非要有抽象方法。</p>
<p>示例代码：</p>
<p>abstract class Cat {</p>
<p>  public static void sayHi() {</p>
<p>​    System. out. println(“hi~”);</p>
<p>  }</p>
<p>}</p>
<p>上面代码，抽象类并没有抽象方法但完全可以正常运行。</p>
<h4 id="12-普通类和抽象类有哪些区别？"><a href="#12-普通类和抽象类有哪些区别？" class="headerlink" title="12. 普通类和抽象类有哪些区别？"></a><strong>12.</strong> <strong>普通类和抽象类有哪些区别？</strong></h4><p>·    普通类不能包含抽象方法，抽象类可以包含抽象方法。</p>
<p>·    抽象类不能直接实例化，普通类可以直接实例化。</p>
<h4 id="13-抽象类能使用-final-修饰吗？"><a href="#13-抽象类能使用-final-修饰吗？" class="headerlink" title="13. 抽象类能使用 final 修饰吗？"></a><strong>13.</strong> <strong>抽象类能使用</strong> <strong>final</strong> <strong>修饰吗？</strong></h4><p>不能，定义抽象类就是让其他类继承的，如果定义为 final 该类就不能被继承，这样彼此就会产生矛盾，所以 final 不能修饰抽象类，如下图所示，编辑器也会提示错误信息：</p>
<p><img src="/img/loading.gif" class="lazyload" data-src="/2020/07/16/java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E6%A3%80%E9%AA%8C/img.png"  alt="图1"></p>
<h4 id="14-接口和抽象类有什么区别？"><a href="#14-接口和抽象类有什么区别？" class="headerlink" title="14. 接口和抽象类有什么区别？"></a><strong>14.</strong> <strong>接口和抽象类有什么区别？</strong></h4><p>·    实现：抽象类的子类使用 extends 来继承；接口必须使用 implements 来实现接口。</p>
<p>·    构造函数：抽象类可以有构造函数；接口不能有。</p>
<p>·    实现数量：类可以实现很多个接口；但是只能继承一个抽象类。</p>
<p>·    访问修饰符：接口中的方法默认使用 public 修饰；抽象类中的方法可以是任意访问修饰符。</p>
<h4 id="15-Java-中-IO-流分为几种？"><a href="#15-Java-中-IO-流分为几种？" class="headerlink" title="15. Java 中 IO 流分为几种？"></a><strong>15. Java</strong> <strong>中</strong> <strong>IO</strong> <strong>流分为几种？</strong></h4><p>按功能来分：输入流（input）、输出流（output）。</p>
<p>按类型来分：字节流和字符流。</p>
<p>字节流和字符流的区别是：字节流按 8 位传输以字节为单位输入输出数据，字符流按 16 位传输以字符为单位输入输出数据。</p>
<h4 id="16-BIO、NIO、AIO有什么区别？"><a href="#16-BIO、NIO、AIO有什么区别？" class="headerlink" title="16. BIO、NIO、AIO有什么区别？"></a><strong>16. BIO、NIO、AIO有什么区别？</strong></h4><p>·    BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p>
<p>·    NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p>
<p>·    AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p>
<h4 id="17-Files-的常用方法都有哪些？"><a href="#17-Files-的常用方法都有哪些？" class="headerlink" title="17. Files**的常用方法都有哪些？**"></a><strong>17. Files**</strong>的常用方法都有哪些？**</h4><p>·    Files. exists()：检测文件路径是否存在。</p>
<p>·    Files. createFile()：创建文件。</p>
<p>·    Files. createDirectory()：创建文件夹。</p>
<p>·    Files. delete()：删除一个文件或目录。</p>
<p>·    Files. copy()：复制文件。</p>
<p>·    Files. move()：移动文件。</p>
<p>·    Files. size()：查看文件个数。</p>
<p>·    Files. read()：读取文件。</p>
<p>·    Files. write()：写入文件。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>面试题</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java虚拟机</title>
    <url>/2020/07/06/Java%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E8%99%9A%E6%8B%9F%E6%9C%BA.md#%E4%B8%80%E8%BF%90%E8%A1%8C%E6%97%B6%E6%95%B0%E6%8D%AE%E5%8C%BA%E5%9F%9F" target="_blank" rel="noopener">参考连接</a></p>
<p>问题一、为什么在执行本地方法时程序计数器为空。</p>
<p>问题二、 </p>
<p>（待续）</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>CAS和Synchronized的区别</title>
    <url>/2020/07/05/CAS%E5%92%8CSynchronized%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener">更多资源</a>：<a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%B9%B6%E5%8F%91.md</a></p>
<h3 id="一、CAS"><a href="#一、CAS" class="headerlink" title="一、CAS"></a>一、CAS</h3><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h5><p> CAS（Compare And Swap ) 或（ Compare-and-Set ）是乐观锁的一种实现方式，是一种轻量级锁。JAVA1.5开始引入了CAS，JUC下很多工具类都是基于CAS。 </p>
<h5 id="CAS的实现方式"><a href="#CAS的实现方式" class="headerlink" title="CAS的实现方式:"></a><strong>CAS的实现方式:</strong></h5><p> CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。当多个线程同时尝试使用CAS更新一个变量时，任何时候只有一个线程可以更新成功，若更新失败，线程会重新进入循环再次进行尝试。 </p>
<h5 id="CAS带来的问题"><a href="#CAS带来的问题" class="headerlink" title="CAS带来的问题"></a>CAS带来的问题</h5><h6 id="ABA问题-："><a href="#ABA问题-：" class="headerlink" title="ABA问题 ："></a><strong>ABA问题</strong> ：</h6><p>ABA问题是指在CAS操作时，其他线程将变量值A改为了B，但是又被改回了A，等到本线程使用期望值A与当前变量进行比较时，发现变量A没有变，于是CAS就将A值进行了交换操作，但是实际上该值已经被其他线程改变过，这与乐观锁的设计思想不符合。ABA问题的解决思路是，每次变量更新的时候把变量的版本号加1，那么A-B-A就会变成A1-B2-A3，只要变量被某一线程修改过，改变量对应的版本号就会发生递增变化，从而解决了ABA问题。在JDK的java.util.concurrent.atomic包中提供了AtomicStampedReference来解决ABA问题，该类的compareAndSet是该类的核心方法，实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(V   expectedReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                            V   newReference,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> expectedStamp,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="keyword">int</span> newStamp)</span> </span>&#123;</span><br><span class="line">   Pair&lt;V&gt; current = pair;</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line">       expectedReference == current.reference &amp;&amp;</span><br><span class="line">       expectedStamp == current.stamp &amp;&amp;</span><br><span class="line">       ((newReference == current.reference &amp;&amp;</span><br><span class="line">         newStamp == current.stamp) ||</span><br><span class="line">        casPair(current, Pair.of(newReference, newStamp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以发现，该类检查了当前引用与当前标志是否与预期相同，如果全部相等，才会以原子方式将该引用和该标志的值设为新的更新值，这样CAS操作中的比较就不依赖于变量的值了。</p>
<h3 id="二、synchronized"><a href="#二、synchronized" class="headerlink" title="二、synchronized"></a>二、synchronized</h3><p>相比于CAS基于乐观锁实现，synchronized是基于悲观锁的，当一个线程试图访问同步代码块时，它首先必须得到锁，退出或抛出异常时必须释放锁。</p>
<ul>
<li>对于普通同步方法加锁时，锁是当前实例对象</li>
<li>对于静态同步方法加锁时，锁是当前类的Class对象</li>
<li>对于同步方法块加锁时，锁是Synchonized括号里配置的对象</li>
</ul>
<h5 id="Synchronized的实现方式："><a href="#Synchronized的实现方式：" class="headerlink" title="Synchronized的实现方式："></a><strong>Synchronized的实现方式：</strong></h5><p>Synchonized是基于进入和退出Monitor对象来实现方法同步和代码块同步，但两者的实现细节不一样。Synchronized 用在方法上时，在字节码中是通过方法的 ACC_SYNCHRONIZED 标志来实现的。而代码块同步则是使用monitorenter和monitorexit指令实现的。</p>
<p>monitorenter指令是在编译后插入到同步代码块的开始位置，而monitorexit是插入到方法结束处和异常处，JVM要保证每个monitorenter必须有对应的monitorexit与之配对。任何对象都有一个monitor与之关联，当且一个monitor被持有后，它将处于锁定状态。线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor的所有权，即尝试获得对象的锁，当获得对象的monitor以后，monitor内部的计数器就会自增（初始为0），当同一个线程再次获得monitor的时候，计数器会再次自增。当同一个线程执行monitorexit指令的时候，计数器会进行自减，当计数器为0的时候，monitor就会被释放，其他线程便可以获得monitor。</p>
<h5 id="Synchronized的优化："><a href="#Synchronized的优化：" class="headerlink" title="Synchronized的优化："></a><strong>Synchronized的优化：</strong></h5><p>Java SE 1.6为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”，在Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态。</p>
<h5 id="偏向锁："><a href="#偏向锁：" class="headerlink" title="偏向锁："></a><strong>偏向锁：</strong></h5><p>当一个线程访问同步块并获取锁时，会在对象头和栈帧中的锁记录里存储锁偏向的线程ID，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储着指向当前线程的偏向锁。如果测试成功，表示线程已经获得了锁。如果测试失败，则需要再测试一下Mark Word中偏向锁的标识是否设置成1（表示当前是偏向锁），如果没有设置，则使用CAS竞争锁；如果设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p>
<h5 id="轻量级锁："><a href="#轻量级锁：" class="headerlink" title="轻量级锁："></a><strong>轻量级锁：</strong></h5><p>线程在执行同步块之前，JVM会先在当前线程的栈桢中创建用于存储锁记录的空间，并将对象头中的Mark Word复制到锁记录中。然后线程尝试使用CAS将对象头中的Mark Word替换为指向锁记录的指针。如果成功，当前线程获得锁，如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。</p>
<h5 id="重量级锁："><a href="#重量级锁：" class="headerlink" title="重量级锁："></a><strong>重量级锁：</strong></h5><p>重量级锁是依赖对象内部的monitor锁来实现。当系统检查到锁是重量级锁之后，会把等待想要获得锁的线程进行阻塞，被阻塞的线程不会消耗cup。但是阻塞或者唤醒一个线程时，都需要操作系统来帮忙，需要从用户态转换到内核态，而转换状态是需要消耗很多时间。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>容器小记</title>
    <url>/2020/07/04/%E5%AE%B9%E5%99%A8%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<h5 id="容器中的设计模式："><a href="#容器中的设计模式：" class="headerlink" title="容器中的设计模式："></a>容器中的设计模式：</h5><ol>
<li>迭代器模式；[例子：容器循环所使用的 Iterator 迭代器]</li>
<li>设配器模式：简单的说就是将原本两个不相干的类联系起来（类似于充电器，连接插座和用电器，将电压变成电器匹配的量级）；[例子：Arrays.asList() 将数组转换成List]</li>
</ol>
<h5 id="默认长度-amp-扩容大小："><a href="#默认长度-amp-扩容大小：" class="headerlink" title="默认长度 &amp; 扩容大小："></a>默认长度 &amp; 扩容大小：</h5><ol>
<li>List</li>
</ol>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">默认大小</th>
<th>默认扩容</th>
<th align="center">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="center">ArrayList</td>
<td align="center">10</td>
<td>原来的1.5倍</td>
<td align="center">由数组实现，因此支持快速随机访问；扩容操作需要将原数组整个复制到新数组中，代价很高；删除元素是将删除index后的元素复制到index的位置，代价很高；</td>
</tr>
<tr>
<td align="center">Vector</td>
<td align="center"></td>
<td>原来的2倍</td>
<td align="center">与ArrayList相似，但是使用了synchronized进行同步，是线程安全的</td>
</tr>
</tbody></table>
<h5 id="得到一个线程-安全的ArrayList替代方案："><a href="#得到一个线程-安全的ArrayList替代方案：" class="headerlink" title="得到一个线程 安全的ArrayList替代方案："></a>得到一个线程 安全的ArrayList替代方案：</h5><p>  ①   Collections.synchronizedList() </p>
<p>  ②   concurrent 并发包下的 CopyOnWriteArrayList 类</p>
<h4 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList :"></a>CopyOnWriteArrayList :</h4><ol>
<li><p>写操作在一个复制的数组上进行，读操作还是在原始数组中进行，读写分离，互不影响。  写操作需要加锁，防止并发写入时导致写入数据丢失。  写操作结束之后需要把原始数组指向新的复制数组。 </p>
</li>
<li><p>适用场景：CopyOnWriteArrayList 在写操作的同时允许读操作，大大提高了读操作的性能，因此很适合读多写少的应用场景。</p>
<p>但是 CopyOnWriteArrayList 有其缺陷：</p>
<ul>
<li>内存占用：在写操作时需要复制一个新的数组，使得内存占用为原来的两倍左右；</li>
<li>数据不一致：读操作不能读取实时性的数据，因为部分写操作的数据还未同步到读数组中。</li>
</ul>
<p>所以 CopyOnWriteArrayList 不适合内存敏感以及对实时性要求很高的场景。</p>
</li>
</ol>
<h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList:"></a>LinkedList:</h4><p> 基于双向链表实现，使用 Node 存储链表节点信息。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>链表不支持随机访问，但插入删除只需要改变指针。</p>
<h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap:"></a>HashMap:</h4><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>capacity</td>
<td>table 的容量大小，默认为 16。需要注意的是 capacity 必须保证为 2 的 n 次方。</td>
</tr>
<tr>
<td>size</td>
<td>键值对数量。</td>
</tr>
<tr>
<td>threshold</td>
<td>size 的临界值，当 size 大于等于 threshold 就必须进行扩容操作。</td>
</tr>
<tr>
<td>loadFactor</td>
<td>装载因子，table 能够使用的比例，threshold = (int)(capacity* loadFactor)。</td>
</tr>
</tbody></table>
<p><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/Java%20%E5%AE%B9%E5%99%A8.md</a> (源码分析：1.7为主)</p>
<p><a href="https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/HashMap.md" target="_blank" rel="noopener">https://github.com/Snailclimb/JavaGuide/blob/master/docs/java/collection/HashMap.md</a> （详细讲解）</p>
<p> 从 JDK 1.8 开始，一个桶存储的链表长度大于等于 8 时会将链表转换为红黑树。 </p>
<p><strong>这里需要注意：1.7  put方法在链表中采用头插法，即当数组位置相同，而key不同，就在这个链表的头部插入该元素；1.8中则是在链表尾部插入</strong></p>
<blockquote>
<p> 为什么要从头插法改成尾插法？ </p>
<p>A.因为头插法会造成死链，参考链接<a href="https://blog.csdn.net/chenyiminnanjing/article/details/82706942" target="_blank" rel="noopener">https://blog.csdn.net/chenyiminnanjing/article/details/82706942</a><br>B.JDK7用头插是考虑到了一个所谓的热点数据的点(新插入的数据可能会更早用到)，但这其实是个伪命题,因为JDK7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置(就是因为头插) 所以最后的结果 还是打乱了插入的顺序 所以总的来看支撑JDK7使用头插的这点原因也不足以支撑下去了 所以就干脆换成尾插 一举多得</p>
</blockquote>
<h6 id="与-Hashtable-的比较"><a href="#与-Hashtable-的比较" class="headerlink" title="与 Hashtable 的比较"></a>与 Hashtable 的比较</h6><ul>
<li>Hashtable 使用 synchronized 来进行同步。</li>
<li>HashMap 可以插入键为 null 的 Entry。</li>
<li>HashMap 的迭代器是 fail-fast 迭代器。</li>
<li>HashMap 不能保证随着时间的推移 Map 中的元素次序是不变的。</li>
</ul>
<h4 id="ConcurrentHashMap："><a href="#ConcurrentHashMap：" class="headerlink" title="ConcurrentHashMap："></a>ConcurrentHashMap：</h4><h6 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h6><p><a href="https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw</a> （详细讲解）</p>
<p>Java7 中 ConcruuentHashMap 使用的分段锁，也就是每一个 Segment 上同时只有一个线程可以操作，每一个 Segment 都是一个类似 HashMap 数组的结构，它可以扩容，它的冲突会转化为链表。但是 Segment 的个数一但初始化就不能改变。</p>
<p> Segment 继承自 ReentrantLock。 </p>
<p>Java8 中的 ConcruuentHashMap 使用的 Synchronized 锁加 CAS 的机制。结构也由 Java7 中的 <strong>Segment 数组 + HashEntry 数组 + 链表</strong> 进化成了 <strong>Node 数组 + 链表 / 红黑树</strong>，Node 是类似于一个 HashEntry 的结构。它的冲突再达到一定大小时会转化成红黑树，在冲突小于一定数量时又退回链表。</p>
<p>JDK8之后，ConcurrentHashMap舍弃了ReentrantLock，而重新使用了synchronized。其原因大致有一下几点：</p>
<ol>
<li>加入多个分段锁浪费内存空间。</li>
<li>生产环境中， map 在放入时竞争同一个锁的概率非常小，分段锁反而会造成更新等操作的长时间等待。</li>
<li>为了提高 GC 的效率</li>
</ol>
<p>新的ConcurrentHashMap中使用synchronized关键字+CAS操作保证了线程安全；详细信息 <a href="https://my.oschina.net/pingpangkuangmo/blog/817973#h2_12" target="_blank" rel="noopener">https://my.oschina.net/pingpangkuangmo/blog/817973#h2_12</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SCAN_RETRIES =</span><br><span class="line">        Runtime.getRuntime().availableProcessors() &gt; <span class="number">1</span> ? <span class="number">64</span> : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 默认的并发级别为 16，也就是说默认创建 16 个 Segment。 </p>
<h6 id="size-操作"><a href="#size-操作" class="headerlink" title="size 操作"></a>size 操作</h6><p>每个 Segment 维护了一个 count 变量来统计该 Segment 中的键值对个数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The number of elements. Accessed only either within locks</span></span><br><span class="line"><span class="comment"> * or among other volatile reads that maintain visibility.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br></pre></td></tr></table></figure>

<p>在执行 size 操作时，需要遍历所有 Segment 然后把 count 累计起来。</p>
<p>ConcurrentHashMap 在执行 size 操作时先尝试不加锁，如果连续两次不加锁操作得到的结果一致，那么可以认为这个结果是正确的。</p>
<p>尝试次数使用 RETRIES_BEFORE_LOCK 定义，该值为 2，retries 初始值为 -1，因此尝试次数为 3。</p>
<p>如果尝试的次数超过 3 次，就需要对每个 Segment 加锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Number of unsynchronized retries in size and containsValue</span></span><br><span class="line"><span class="comment"> * methods before resorting to locking. This is used to avoid</span></span><br><span class="line"><span class="comment"> * unbounded retries if tables undergo continuous modification</span></span><br><span class="line"><span class="comment"> * which would make it impossible to obtain an accurate result.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RETRIES_BEFORE_LOCK = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Try a few times to get accurate count. On failure due to</span></span><br><span class="line">    <span class="comment">// continuous async changes in table, resort to locking.</span></span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="keyword">long</span> sum;         <span class="comment">// sum of modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;   <span class="comment">// previous sum</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; <span class="comment">// first iteration isn't retry</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">// 超过尝试次数，则对每个 Segment 加锁</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 连续两次得到的结果一致，则认为这个结果是正确的</span></span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="JDK-1-8-的改动"><a href="#JDK-1-8-的改动" class="headerlink" title="JDK 1.8 的改动"></a>JDK 1.8 的改动</h6><p>JDK 1.7 使用分段锁机制来实现并发更新操作，核心类为 Segment，它继承自重入锁 ReentrantLock，并发度与 Segment 数量相等。</p>
<p>JDK 1.8 使用了 CAS 操作来支持更高的并发度，在 CAS 操作失败时使用内置锁 synchronized。</p>
<p>并且 JDK 1.8 的实现也在链表过长时会转换为红黑树。</p>
<h4 id="LinkedHashMap："><a href="#LinkedHashMap：" class="headerlink" title="LinkedHashMap："></a>LinkedHashMap：</h4><p> 继承自 HashMap，因此具有和 HashMap 一样的快速查找特性。 </p>
<p> 内部维护了一个双向链表，用来维护插入顺序或者 LRU 顺序。 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * The head (eldest) of the doubly linked list.</span><br><span class="line"> *&#x2F;</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; head;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * The tail (youngest) of the doubly linked list.</span><br><span class="line"> *&#x2F;</span><br><span class="line">transient LinkedHashMap.Entry&lt;K,V&gt; tail;</span><br></pre></td></tr></table></figure>

<p>accessOrder 决定了顺序，默认为 false，此时维护的是插入顺序。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final boolean accessOrder;</span><br></pre></td></tr></table></figure>

<p>LinkedHashMap 最重要的是以下用于维护顺序的函数，它们会在 put、get 等方法中调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; p) &#123; &#125;</span><br><span class="line">void afterNodeInsertion(boolean evict) &#123; &#125;</span><br></pre></td></tr></table></figure>

<h6 id="afterNodeAccess"><a href="#afterNodeAccess" class="headerlink" title="afterNodeAccess()"></a>afterNodeAccess()</h6><p>当一个节点被访问时，如果 accessOrder 为 true，则会将该节点移到链表尾部。也就是说指定为 LRU 顺序之后，在每次访问一个节点时，会将这个节点移到链表尾部，保证链表尾部是最近访问的节点，那么链表首部就是最近最久未使用的节点。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">void afterNodeAccess(Node&lt;K,V&gt; e) &#123; &#x2F;&#x2F; move node to last</span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; last;</span><br><span class="line">    if (accessOrder &amp;&amp; (last &#x3D; tail) !&#x3D; e) &#123;</span><br><span class="line">        LinkedHashMap.Entry&lt;K,V&gt; p &#x3D;</span><br><span class="line">            (LinkedHashMap.Entry&lt;K,V&gt;)e, b &#x3D; p.before, a &#x3D; p.after;</span><br><span class="line">        p.after &#x3D; null;</span><br><span class="line">        if (b &#x3D;&#x3D; null)</span><br><span class="line">            head &#x3D; a;</span><br><span class="line">        else</span><br><span class="line">            b.after &#x3D; a;</span><br><span class="line">        if (a !&#x3D; null)</span><br><span class="line">            a.before &#x3D; b;</span><br><span class="line">        else</span><br><span class="line">            last &#x3D; b;</span><br><span class="line">        if (last &#x3D;&#x3D; null)</span><br><span class="line">            head &#x3D; p;</span><br><span class="line">        else &#123;</span><br><span class="line">            p.before &#x3D; last;</span><br><span class="line">            last.after &#x3D; p;</span><br><span class="line">        &#125;</span><br><span class="line">        tail &#x3D; p;</span><br><span class="line">        ++modCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="afterNodeInsertion"><a href="#afterNodeInsertion" class="headerlink" title="afterNodeInsertion()"></a>afterNodeInsertion()</h6><p>在 put 等操作之后执行，当 removeEldestEntry() 方法返回 true 时会移除最晚的节点，也就是链表首部节点 first。</p>
<p>evict 只有在构建 Map 的时候才为 false，在这里为 true。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterNodeInsertion</span><span class="params">(<span class="keyword">boolean</span> evict)</span> </span>&#123; <span class="comment">// possibly remove eldest</span></span><br><span class="line">    LinkedHashMap.Entry&lt;K,V&gt; first;</span><br><span class="line">    <span class="keyword">if</span> (evict &amp;&amp; (first = head) != <span class="keyword">null</span> &amp;&amp; removeEldestEntry(first)) &#123;</span><br><span class="line">        K key = first.key;</span><br><span class="line">        removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>removeEldestEntry() 默认为 false，如果需要让它为 true，需要继承 LinkedHashMap 并且覆盖这个方法的实现，这在实现 LRU 的缓存中特别有用，通过移除最近最久未使用的节点，从而保证缓存空间足够，并且缓存的数据都是热点数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry&lt;K,V&gt; eldest)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="LRU-缓存"><a href="#LRU-缓存" class="headerlink" title="LRU 缓存"></a>LRU 缓存</h4><p>以下是使用 LinkedHashMap 实现的一个 LRU 缓存：</p>
<ul>
<li>设定最大缓存空间 MAX_ENTRIES 为 3；</li>
<li>使用 LinkedHashMap 的构造函数将 accessOrder 设置为 true，开启 LRU 顺序；</li>
<li>覆盖 removeEldestEntry() 方法实现，在节点多于 MAX_ENTRIES 就会将最近最久未使用的数据移除。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LRUCache</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">LinkedHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_ENTRIES = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">removeEldestEntry</span><span class="params">(Map.Entry eldest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> size() &gt; MAX_ENTRIES;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    LRUCache() &#123;</span><br><span class="line">        <span class="keyword">super</span>(MAX_ENTRIES, <span class="number">0.75f</span>, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    LRUCache&lt;Integer, String&gt; cache = <span class="keyword">new</span> LRUCache&lt;&gt;();</span><br><span class="line">    cache.put(<span class="number">1</span>, <span class="string">"a"</span>);</span><br><span class="line">    cache.put(<span class="number">2</span>, <span class="string">"b"</span>);</span><br><span class="line">    cache.put(<span class="number">3</span>, <span class="string">"c"</span>);</span><br><span class="line">    cache.get(<span class="number">1</span>);</span><br><span class="line">    cache.put(<span class="number">4</span>, <span class="string">"d"</span>);</span><br><span class="line">    System.out.println(cache.keySet());</span><br><span class="line">&#125;</span><br><span class="line">[<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>容器</tag>
      </tags>
  </entry>
  <entry>
    <title>事务传播行为与事务隔离级别</title>
    <url>/2020/06/04/%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E4%B8%8E%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
    <content><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h4 id="事务读传播行为"><a href="#事务读传播行为" class="headerlink" title="事务读传播行为"></a>事务读传播行为</h4><h6 id="·-保证同一个事务中"><a href="#·-保证同一个事务中" class="headerlink" title="· 保证同一个事务中"></a>· 保证同一个事务中</h6><p>PROPAGATION_REQUIRED支持当前事务，如果不存在，就新建一个（默认）<br>PROPAGATION_SUPPORTS支持当前事务，如果不存在，就不适用事务<br>PROPAGATION_MANDATORY 支持当前事务，如果不存在，抛出异常</p>
<h6 id="·-保证没有在同一个事务中"><a href="#·-保证没有在同一个事务中" class="headerlink" title="· 保证没有在同一个事务中"></a>· 保证没有在同一个事务中</h6><p>PROPAGATION_REQUIRES_NEW如果有事务存在，挂起当前事务，创建一个新的事务<br>PROPAGATION_NOT_SUPPORTED 以非事务方式运行，如果有事务存在，挂起当前事务<br>PROPAGATION_NEVER 以非事务方式运行，如果有事务存在，抛出异常<br>PROPAGATION_NESTED 如果当前事务存在，则嵌套事务执行</p>
<h4 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h4><p>DEFAULT这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别；</p>
<h6 id="未提交读（read-uncommitted）："><a href="#未提交读（read-uncommitted）：" class="headerlink" title="未提交读（read uncommitted）："></a>未提交读（read uncommitted）：</h6><p>​    事务的修改，即使当前事务没有被提交，对其他事务而言也是可见的。事务可以读取未提交的数据，也称为脏读。这个级别会导致很多问题，性能上也不比其他级别好多少，一般不会使用；</p>
<h6 id="已提交读（read-committed）："><a href="#已提交读（read-committed）：" class="headerlink" title="已提交读（read committed）："></a>已提交读（read committed）：</h6><p>​    大部分数据库系统的默认隔离级别都是read committed（Mysql 不是），它表示一个事务只能看到已经提交的事务所做的修改。换个角度来讲，就是一个事务从开始到提交之前，所做的操作对别的操作都是不可见的。此隔离级别也被称为（<strong>不可重复读</strong>），因为多次执行同样的查询语句，可能会得出不一样的结果，因为可能有别的事务提交了。</p>
<h6 id="可重复读（repeatable-read）："><a href="#可重复读（repeatable-read）：" class="headerlink" title="可重复读（repeatable read）："></a>可重复读（repeatable read）：</h6><p>​    repeatable read解决了脏读的问题，该隔离级别保证了在同一个事务中每次读取都是同样的结果，但是还是无法解决幻读的问题。（<strong>幻读：</strong>指的是当某个事务在读取某个范围内的记录时，另一个事务又在该范围内插入了新的记录，当之前的事务再读取该范围内的记录时，会产生幻行；）【这是高性能Mysql中的解释，我的个人理解为：先读取的事务读不到后来新添加的记录，导致读取不准确】。但InnoDB和XtraDB存储引擎通过多版本并发控制（MVCC）解决了幻读的问题，后面我会详细写到。</p>
<h6 id="可串行化的（serializable）："><a href="#可串行化的（serializable）：" class="headerlink" title="可串行化的（serializable）："></a>可串行化的（serializable）：</h6><p>强制事务串行执行，由于可能会导致大量的超时和锁争用，通常不考虑。<br>MySQL默认：可重复读<br>Oracle默认：已提交读</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>事务</tag>
      </tags>
  </entry>
  <entry>
    <title>servlet学习笔记</title>
    <url>/2020/05/04/servlet%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="1-Tomcat主要在程序中做了些什么？"><a href="#1-Tomcat主要在程序中做了些什么？" class="headerlink" title="1.Tomcat主要在程序中做了些什么？"></a>1.Tomcat主要在程序中做了些什么？</h3><p>1.1  创建socket监听在对应的端口</p>
<p>1.2  维护一个线程池</p>
<p>1.3  当有TCP连接时分配一个线程来处理</p>
<p>1.4  从TCP连接中读取数据</p>
<p>1.5  按照HTTP协议解析数据</p>
<p>1.6  将解析后的数据包封装到request对象中</p>
<p>1.7  按照web.xml的映射关系找到对应的Servlet类</p>
<p>1.8  将最后的执行结果response组装成HTTP协议格式的数据包</p>
<p>1.9  重新通过TCP返回给客户端</p>
<h3 id="2-访问servlet-的过程"><a href="#2-访问servlet-的过程" class="headerlink" title="2.访问servlet 的过程"></a>2.访问servlet 的过程</h3><p>2.1  connector 负责监听端⼝,当有链接进来时分配线程并实例化HttpllProcessor对数据进⾏ HTTP协议解析,然后将请求交给其所在的engine即Catalina来处理,处理的是域名对应的ip和 端⼝8080 ,注意localhost任然没被使⽤ </p>
<p>2.2  engine将从HTTP请求头中获取host参数⽤于选择⼀个匹配的Host   处理的是主机名 localhost(Host可以配置多个,即你可以在⼀台电脑上部署两个完全不相关的web项⽬例如jd 和百度),此时处理的是域名即localhost</p>
<p>2.3  Host将在Context中查找匹配第⼀级路径的Context(web项⽬)   处理的是第⼀级路径(ServletLesson)</p>
<p>2.4  读取ServletLesson项⽬的web.xml配置,查找匹配TestServlet的Servlet</p>
<p>2.5  实例化Servlet,调⽤Service根据请求类型执⾏对应的Get或Post ,处理的真正的客户端请求</p>
<p>2.6  Servlet响应⽅法执⾏完毕后,响应数据依次返回-&gt;Context-&gt;Host-&gt;engine-&gt;connector</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Tomcat</tag>
        <tag>Servlet</tag>
      </tags>
  </entry>
  <entry>
    <title>部署web到Tomcat的三种方式</title>
    <url>/2020/05/04/%E9%83%A8%E7%BD%B2web%E5%88%B0Tomcat%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<p>这里简单的记录tomcat的部署方式：</p>
<p>一、 直接将 web 项目文件（一般是复制生成的war包）复制到tomcat的webapps目录中 ；</p>
<p>二、在tomcat中的conf目录下的server.xml文件中，在<Host>节点中添加一个context，具体为：</Host></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">Path</span>=<span class="string">""</span> <span class="attr">Docbase</span>=<span class="string">"目标目录位置"</span> <span class="attr">Debug</span>=<span class="string">"0"</span> <span class="attr">Privileged</span>=<span class="string">"True"</span> <span class="attr">Reloadable</span>=<span class="string">"True"</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>这里的 Reloadable= “true” 这个属性是指tomcat在运行状态下会自动检测应用程序的WEB-INF/classes和WEB-INF/lib目录下的class文件，如果监测到有class文件有改动，服务器自动加载新的web应用程序，可以在不重起tomcat的情况下改变应用程序，也就是热部署；</p>
<p>一般我们会在开发阶段将Reloadable属性设为true，有助于调试servlet和其它的class文件，但是由于这样会增加服务器的运行负荷，损耗系统性能，在项目运行阶段建议将它设为false。</p>
<p>三、直接将编译后的项目复制到webapps中，直接访问</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>Lambda表达式常见应用场景</title>
    <url>/2020/04/19/Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<h3 id="一、集合中的使用"><a href="#一、集合中的使用" class="headerlink" title="一、集合中的使用"></a>一、集合中的使用</h3><ul>
<li><h5 id="集合的遍历"><a href="#集合的遍历" class="headerlink" title="集合的遍历"></a>集合的遍历</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 初始化集合</span></span><br><span class="line">List&lt;User&gt; users = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"詹姆士"</span>,<span class="number">22</span>,<span class="string">"男"</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"露西"</span>,<span class="number">21</span>,<span class="string">"女"</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"弗兰克"</span>,<span class="number">25</span>,<span class="string">"男"</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"爱丽丝"</span>,<span class="number">27</span>,<span class="string">"女"</span>));</span><br><span class="line">users.add(<span class="keyword">new</span> User(<span class="string">"路易斯"</span>,<span class="number">22</span>,<span class="string">"男"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历集合 Lambda</span></span><br><span class="line">users.stream().forEach(user -&gt; System.out.println(user));</span><br><span class="line"><span class="comment">// 遍历集合 方法引用</span></span><br><span class="line">users.stream().forEach(System.out::println);</span><br></pre></td></tr></table></figure>

<p><strong>方法引用（::双冒号操作符）</strong></p>
<ol>
<li><p>其实就是一种Lambda表达式的简写方式，它提供了一种引用而不执行方法的方式，运行时，方法引用会创建一个函数式接口的实例。</p>
</li>
<li><p>方法引用的五种方式：</p>
<table>
<thead>
<tr>
<th align="center">—-</th>
<th align="center">—-</th>
</tr>
</thead>
<tbody><tr>
<td align="center">引用对象的实例方法</td>
<td align="center">对象::实例方法名</td>
</tr>
<tr>
<td align="center">引用类的静态方法</td>
<td align="center">类::静态方法名</td>
</tr>
<tr>
<td align="center">引用类的实例方法</td>
<td align="center">类::实例方法名</td>
</tr>
<tr>
<td align="center">引用构造方法</td>
<td align="center">类::new</td>
</tr>
<tr>
<td align="center">数组引用</td>
<td align="center">类型::new</td>
</tr>
</tbody></table>
</li>
</ol>
</li>
<li><h5 id="List转Map"><a href="#List转Map" class="headerlink" title="List转Map"></a>List转Map</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里的toMap有三个参数，第一个取的名称为 key,第二个参数 表示整个user对象为一个 value,最后一个参数可以不加，它的作用是如果 key 值有重复的，如何处理</span></span><br><span class="line">Map&lt;String, User&gt; userMap = users.stream().collect(Collectors.toMap(User::getName, a -&gt; a, (k1, k2) -&gt; k1));</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="将List分组"><a href="#将List分组" class="headerlink" title="将List分组"></a>将List分组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据性别进行分类</span></span><br><span class="line">Map&lt;String, List&lt;User&gt;&gt; groupBy = users.stream().collect(Collectors.groupingBy(User::getSex));</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="集合过滤"><a href="#集合过滤" class="headerlink" title="集合过滤"></a>集合过滤</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 过滤出男性</span></span><br><span class="line">List&lt;User&gt; filterList = users.stream().filter(user -&gt; user.getSex().equals(<span class="string">"男"</span>)).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>
</li>
<li><h5 id="集合求和"><a href="#集合求和" class="headerlink" title="集合求和"></a>集合求和</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 年龄和</span></span><br><span class="line"><span class="keyword">int</span> sum = users.stream().mapToInt(User::getAge).sum();</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="二、代替Runnable"><a href="#二、代替Runnable" class="headerlink" title="二、代替Runnable"></a>二、代替Runnable</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 利用Lambda实现Runnable里的run方法</span></span><br><span class="line">Runnable r = () -&gt; &#123;</span><br><span class="line">   System.out.println(Thread.currentThread().getName());</span><br><span class="line"> &#125;  ;</span><br><span class="line">Thread thread = <span class="keyword">new</span> Thread(r);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>

<h3 id="三、Predicate条件过滤"><a href="#三、Predicate条件过滤" class="headerlink" title="三、Predicate条件过滤"></a>三、Predicate条件过滤</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       List&lt;Integer&gt; numbers = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">       filter(numbers,number -&gt; &#123;</span><br><span class="line">          <span class="keyword">return</span> (<span class="keyword">int</span>)number &gt; <span class="number">2</span>;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 过滤方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> list</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> condition</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filter</span><span class="params">(List list, Predicate condition)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       list.forEach(number -&gt; &#123;</span><br><span class="line">           <span class="keyword">if</span> (condition.test(number))&#123;</span><br><span class="line">               System.out.println(number);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、Map映射"><a href="#四、Map映射" class="headerlink" title="四、Map映射"></a>四、Map映射</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将返回一个将每个数字都×2的新List</span></span><br><span class="line">List&lt;Integer&gt; mapList = numbers.stream().map(number -&gt; number * <span class="number">2</span>).collect(Collectors.toList());</span><br></pre></td></tr></table></figure>

<h3 id="五、Reduce聚合"><a href="#五、Reduce聚合" class="headerlink" title="五、Reduce聚合"></a>五、Reduce聚合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回所有成员的和</span></span><br><span class="line">Integer sum = numbers.stream().reduce((x, y) -&gt; x + y).get();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA反射机制</title>
    <url>/2020/04/13/JAVA%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/</url>
    <content><![CDATA[<h1 id="JAVA反射机制"><a href="#JAVA反射机制" class="headerlink" title="JAVA反射机制"></a>JAVA反射机制</h1><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>java反射机制是在运行状态中，对于任意一个类，都能够得到这个类的所有属性和方法；对于任意一个对象，都能调用它的任意方法和属性；这种动态获取信息以及动态调用对象的方法的功能称为<strong>反射机制</strong></p>
<h3 id="获取Class对象的两种方式"><a href="#获取Class对象的两种方式" class="headerlink" title="获取Class对象的两种方式"></a>获取Class对象的两种方式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.如果我们知道具体的类,可以使用下面的代码，[类名.class];但是通常情况下我们是不知道具体的类的，并且还需要导入类的包，依赖太强。</span></span><br><span class="line">Class targetClass = TargetObject<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.通过[Class.forName()]小括号中传入类的字符串路径获取，字符串可以写在配置文件中。</span></span><br><span class="line">Class targetClass = Class.forName(<span class="string">"frosro.test.TargetObject"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.其实还有一种方法，继承自Object类的getClass方法，如下，但这样对象都已经存在了，我们再用反射就多此一举了。</span></span><br><span class="line">TargetObject targetObject = <span class="keyword">new</span> TargetObject();</span><br><span class="line">Class targetClass = targetObject.getClass();</span><br></pre></td></tr></table></figure>

<h3 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h3><p>首先创建一个我们将要操作的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> fanshe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 21:35</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TargetObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TargetObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        value = <span class="string">"initVal"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">publicMethod</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I love "</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">privateMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"value is "</span> + value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用反射来操作这个类的方法和参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package fanshe;</span><br><span class="line"></span><br><span class="line">import java.lang.annotation.Annotation;</span><br><span class="line">import java.lang.reflect.Field;</span><br><span class="line">import java.lang.reflect.InvocationTargetException;</span><br><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * @author sy</span><br><span class="line"> * @data \ 21:36</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取TargetObject类的Class对象</span><br><span class="line">        Class&lt;?&gt; tagetClass  &#x3D; Class.forName(&quot;fanshe.TargetObject&quot;);</span><br><span class="line">        &#x2F;&#x2F; 创建一个TargetObject类的实例</span><br><span class="line">        TargetObject targetObject &#x3D; (TargetObject)tagetClass .newInstance();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取类中所有定义的方法</span><br><span class="line">        Method[] methods &#x3D; tagetClass.getDeclaredMethods();</span><br><span class="line">        for (Method method : methods) &#123;</span><br><span class="line">            &#x2F;&#x2F; 循环输出方法名称</span><br><span class="line">            System.out.println(method.getName());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取指定方法并调用</span><br><span class="line">        Method publicMethod &#x3D; tagetClass.getDeclaredMethod(&quot;publicMethod&quot;, String.class);</span><br><span class="line">        publicMethod.invoke(targetObject,&quot;frosro&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 获取指定参数</span><br><span class="line">        Field field &#x3D; tagetClass.getDeclaredField(&quot;value&quot;);</span><br><span class="line">        &#x2F;&#x2F; 取消安全检查，这样我们就可以访问到私有的属性和方法</span><br><span class="line">        field.setAccessible(true);</span><br><span class="line">        &#x2F;&#x2F; 对参数进行修改</span><br><span class="line">        field.set(targetObject,&quot;frosro&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 调用私有的方法</span><br><span class="line">        Method privateMethod &#x3D; tagetClass.getDeclaredMethod(&quot;privateMethod&quot;);</span><br><span class="line">        privateMethod.setAccessible(true);</span><br><span class="line">        privateMethod.invoke(targetObject);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有其他很多方法，可以翻看文档查找；</p>
<h3 id="反射机制优缺点"><a href="#反射机制优缺点" class="headerlink" title="反射机制优缺点"></a>反射机制优缺点</h3><ul>
<li><p>优点： 运行期类型的判断，动态加载类，提高代码灵活度。 </p>
</li>
<li><p>缺点：  </p>
<p>1.性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，性能比直接的 java 代码要慢很多。</p>
<p>2.安全问题：让我们可以动态操作改变类的属性同时也增加了类的安全隐患。 </p>
</li>
</ul>
<h3 id="反射的应用场景"><a href="#反射的应用场景" class="headerlink" title="反射的应用场景"></a>反射的应用场景</h3><p>在我们平时的项目开发过程中，基本上很少会直接使用到反射机制，但这不能说明反射机制没有用，实际上有很多设计、开发都与反射机制有关，例如模块化的开发，通过反射去调用对应的字节码；动态代理设计模式也采用了反射机制，还有我们日常使用的 Spring／Hibernate 等框架也大量使用到了反射机制。</p>
<p>举例：</p>
<ol>
<li>我们在使用 JDBC 连接数据库时使用 <code>Class.forName()</code>通过反射加载数据库的驱动程序；</li>
<li>Spring 框架的 IOC（动态加载管理 Bean）创建对象以及 AOP（动态代理）功能都和反射有联系；</li>
<li>动态配置实例的属性；</li>
</ol>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA集合的多种遍历方式总结</title>
    <url>/2020/03/29/JAVA%E9%9B%86%E5%90%88%E7%9A%84%E5%A4%9A%E7%A7%8D%E9%81%8D%E5%8E%86%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<ol>
<li>Collection 集合 :  总的来说分为以下这三类，这里更多的子类我便不在阐述了。</li>
</ol>
<ul>
<li>Set ： 无序集合，元素不可重复；</li>
<li>Queue  ： 队列；</li>
<li>List ： 有序集合，元素可以重复；</li>
</ul>
<ol start="2">
<li>Map集合 ：一般用于保存拥有映射关系的数据，也就是 key-value 键值对，它也有很多子类，这里不细说；</li>
</ol>
<hr>
<p>本文以HashSet 为例，总结遍历方式。当然像List这种有序集合还可以通过for循环的方式遍历。</p>
<p><strong>下面是主要内容：</strong></p>
<h3 id="一、使用-Lambda-表达式遍历集合"><a href="#一、使用-Lambda-表达式遍历集合" class="headerlink" title="一、使用 Lambda 表达式遍历集合"></a>一、使用 Lambda 表达式遍历集合</h3><p>从 JDK8 开始，Iterable 接口新增了 forEach(Consumer action)方法，主要 是使用 Lambda 表达式更加简洁的操作。Consumer 其实是一个函数式接 口，只要是函数式接口，都能够使用 Lambda 表示来进行替代。在调用这 个方法的时候，其实会依次将集合的元素传递给 Consumer 中的 accept(T t) 方法去处理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 21:34</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class CollectionEach &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;String&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        books.add(&quot;编程思想&quot;);</span><br><span class="line">        books.add(&quot;核心技术&quot;);</span><br><span class="line">        books.add(&quot;从入门到放弃&quot;);</span><br><span class="line">        books.forEach(str -&gt; System.out.println(&quot;书名：&quot;  + str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二、-使用-Iterator-遍历集合元素"><a href="#二、-使用-Iterator-遍历集合元素" class="headerlink" title="二、 使用 Iterator 遍历集合元素"></a>二、 使用 Iterator 遍历集合元素</h3><p>Iterator 主要用来遍历 Conllection 集合中的元素，也叫迭代器。它只能用于遍历集合。</p>
<p>常用方法如下：</p>
<ul>
<li>hasNext()：判断集合中还有没有元素，如果有则返回 true。 </li>
<li>next()：取出集合中的下一个元素。 </li>
<li>remove()：移除上面 next() 方法中读取的元素。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 21:48</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class IteratorTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;String&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        books.add(&quot;编程思想&quot;);</span><br><span class="line">        books.add(&quot;核心技术&quot;);</span><br><span class="line">        books.add(&quot;从入门到放弃&quot;);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 通过 iterator() 方法，获取 books 集合对应的迭 代器</span><br><span class="line">        Iterator&lt;String&gt; iterator &#x3D; books.iterator();</span><br><span class="line"></span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            String next &#x3D; iterator.next();</span><br><span class="line">            System.out.println(next);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 对 next 变量赋值，不会改变集合元素本身</span><br><span class="line">            &#x2F;&#x2F; Iterator 并不会把集合元素本身交给迭代变 量，</span><br><span class="line">            &#x2F;&#x2F; 而是把集合元素的值交给了迭代变量</span><br><span class="line">            &#x2F;&#x2F; 所以在修改迭代变量的值之后对集合远古三本身并 没有任何覆盖。</span><br><span class="line">            next &#x3D; &quot;设计模式&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 如果我们在使用迭代器的过程中改变了集合元素的值，也就是books,比如</span><br><span class="line">            &#x2F;&#x2F; books.remove(next);</span><br><span class="line">            &#x2F;&#x2F; 上面这行代码运行会报 ConcurrentModificationException 异常</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(books);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本质上，是因为 Iterator 迭代器使用了 fail-fast 机制（快速失败机制）， 在迭代过程中一旦发现有其他线程来修改该集合，则马上报 ConcurrentModicationException 异常，这样做可以避免共享资源而埋下其他隐患问题。</p>
<h3 id="三、-使用-Lambda-表达式遍历-Iterator"><a href="#三、-使用-Lambda-表达式遍历-Iterator" class="headerlink" title="三、 使用 Lambda 表达式遍历 Iterator"></a>三、 使用 Lambda 表达式遍历 Iterator</h3><p>核心方法：</p>
<ul>
<li>forEachRemaining()：JDK8 新增方法，使用 Lambda 表达式来遍历集合元素。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 22:06</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class IteratorEach &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;String&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        books.add(&quot;编程思想&quot;);</span><br><span class="line">        books.add(&quot;核心技术&quot;);</span><br><span class="line">        books.add(&quot;从入门到放弃&quot;);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;String&gt; iterator &#x3D; books.iterator();</span><br><span class="line"></span><br><span class="line">        iterator.forEachRemaining(str -&gt; System.out.println(&quot;迭代集合元素：&quot; + str));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、-使用-foreach-循环遍历集合元素"><a href="#四、-使用-foreach-循环遍历集合元素" class="headerlink" title="四、  使用 foreach 循环遍历集合元素"></a>四、  使用 foreach 循环遍历集合元素</h3><p>foreach 循环，是我们常用的一种遍历方式。另外，foreach 循环中迭代变量也不是集合元素本身，其实也是把每个集合元素的值赋给了迭代变量。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 22:13</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class ForeachTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HashSet&lt;String&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        books.add(&quot;编程思想&quot;);</span><br><span class="line">        books.add(&quot;核心技术&quot;);</span><br><span class="line">        books.add(&quot;从入门到放弃&quot;);</span><br><span class="line"></span><br><span class="line">        for (String book : books) &#123;</span><br><span class="line">            System.out.println(book);</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 改变book的值，并不会改变books集合的数据</span><br><span class="line">            &#x2F;&#x2F; 因为book只是保存着books其中的一个值</span><br><span class="line">            book &#x3D; &quot;设计模式&quot;;</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; 同样的，我们也不能在遍历时改变原有的集合books</span><br><span class="line">            &#x2F;&#x2F; 如果像下面这种方式，会报 ConcurrentModificationException</span><br><span class="line">            &#x2F;&#x2F; books.remove(book);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(books);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="五、-使用-Stream遍历集合"><a href="#五、-使用-Stream遍历集合" class="headerlink" title="五、  使用 Stream遍历集合"></a>五、  使用 Stream遍历集合</h3><p>JDK8 新增了 Stream、IntStream、LongStream、DoubleStream 等强悍的 流式 API，代表多个支持串行 &amp; 并行聚集操作的元素。还可以通过特别提 供的 Builder 来创建对应的流。</p>
<p>使用步骤：</p>
<p> 1）使用 Stream 或 XxxStream 的 builder() 方法初始化对应 的 Builder。<br>2）多次调用 Builder 的 add() 方法，添加元素<br>3）调用 Builder 的 build() 方法获取对应的 Stream。<br>4）调用 Stream 的聚集方法。（具体参考 API 文档）</p>
<p>Stream 提供了很多方法，可以归类为两种：</p>
<ul>
<li>Intermediate（中间方法）<br>中间方法，指的是中间操作允许流保持打开状态，并允许直接调用后续方 法，中间方法的返回值是另外一个流。</li>
<li>Terminal（末端方法）<br>末端方法，指的是对流的终操作，执行过后，该流就会被“消耗”且不再可用。因为我们在操作的时候，是在内存中的缓存中，如果操作完毕，它将会从缓冲中刷新flush() 出来，就不能再改了。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 22:29</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class IntStreamTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">       Stream stream &#x3D; Stream.builder()</span><br><span class="line">               .add(&quot;编程思想&quot;)</span><br><span class="line">                .add(&quot;核心技术&quot;)</span><br><span class="line">                .add(&quot;从入门到放弃&quot;).build();</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 当然，这里不可避免的用到了forEach</span><br><span class="line">       stream.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>或者是这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author frosro</span><br><span class="line"> * @data 22:29</span><br><span class="line"> *&#x2F;</span><br><span class="line">public class IntStreamTest &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line"></span><br><span class="line">        HashSet&lt;String&gt; books &#x3D; new HashSet&lt;&gt;();</span><br><span class="line">        books.add(&quot;编程思想&quot;);</span><br><span class="line">        books.add(&quot;核心技术&quot;);</span><br><span class="line">        books.add(&quot;从入门到放弃&quot;);</span><br><span class="line"></span><br><span class="line">        books.stream().forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能你会觉得这和第一种方式很像，我测试了一下，这两者效率也相差无几。<br>但是stream流却是目前必须掌握的方式。因为它的一些其他用法都颇为重要。</p>
]]></content>
      <categories>
        <category>🐺JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>循环</tag>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博文</title>
    <url>/2020/03/28/myfirstPage/</url>
    <content><![CDATA[<p>我的个人博客算是建立了，中间遇到比较坑的就是，我想要使用java做分类，但总是报404，但是JAVA却可以，没找到原因；还有就是阿里云的域名真的是坑，提交了十几个实名认证还是没通过，太考验耐心了。markdown还不太会用，渐渐熟练吧，之后我会把遇到的好的经验分享到这个博客，其他教程什么的网上太多了，我就不在这上面添加了，我只写我认为有价值的博文，如果哪位同学有问题或者想要和我在技术上交流，可以联系我，我会非常乐意分享我所知道的信息。大家一起学习，共同进步为社会主义做贡献！</p>
]]></content>
      <categories>
        <category>🐟台小记</category>
      </categories>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
</search>
